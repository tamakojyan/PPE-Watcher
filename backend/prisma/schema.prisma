generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"                // Your current minimal setup: SQLite single file
  url      = env("DATABASE_URL")     // Example: file:./db.sqlite
}

enum Role {
  user
}

enum NotificationStatus {
  read
  unread
}

enum NotificationType {
  violation
  resolved
}

enum ViolationType {
  no_helmet
  no_mask
  no_vest
  no_gloves
}

model User {
  id        String      @id                      // Manually assigned, e.g. "USR001"
  email     String      @unique
  password  String
  createdAt DateTime    @default(now())

  // Relations
  bookmarks Violation[]     @relation("UserBookmarks")
  notices   Notification[] @relation("UserNotices") // Notifications received by the user
}

model Contact {
  id        String    @id                        // Manually assigned, e.g. "CON001"
  name      String
  email     String?
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

}


model Violation {
  id          String    @id                      // Manually assigned, e.g. "VIO001"
  kind        ViolationType                               // Type of violation (e.g. no_helmet)
  confidence  Float?
  ts          DateTime   @default(now())
  snapshotUrl String?
  note        String?



  // Derived notifications (no alerts table, notifications directly linked to violation)
  notices     Notification[]
  bookmarkedBy User[]    @relation("UserBookmarks")

  @@index([ts])
}

model Notification {
  id           String              @id            // Manually assigned, e.g. "NTF001"
  type         NotificationType    @default(violation)
  kind         ViolationType                               // Type of violation (e.g. no_helmet)
  status       NotificationStatus  @default(unread)
  createdAt    DateTime            @default(now())
  readAt       DateTime?

  // The violation this notification refers to (optional, could be system notification)
  violationId  String?
  violation    Violation?          @relation(fields: [violationId], references: [id], onDelete: SetNull)

  // The otification handledby (usually a user)
  userId       String?
  user         User?               @relation("UserNotices", fields: [userId], references: [id], onDelete: SetNull)

  // Extra fields
  message      String?
  note         String?


  @@index([userId])
  @@index([violationId])
  @@index([status])
  @@unique([userId, violationId, status])
}
