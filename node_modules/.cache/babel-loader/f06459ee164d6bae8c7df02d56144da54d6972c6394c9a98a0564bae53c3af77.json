{"ast":null,"code":"async function fetchWithRetry(url, options, retries = 3) {\n  try {\n    const response = await fetch(url, options);\n    if (response.ok) {\n      return response;\n    }\n    throw new Error(`Request failed with status ${response.status}`);\n  } catch (error) {\n    if (retries === 0) {\n      throw error;\n    }\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(fetchWithRetry(url, options, retries - 1));\n      }, Math.random() * 3_000);\n    });\n  }\n}\nexport { fetchWithRetry };","map":{"version":3,"names":["fetchWithRetry","url","options","retries","response","fetch","ok","Error","status","error","Promise","resolve","setTimeout","Math","random"],"sources":["C:/Users/tamak/Desktop/Workspace/ppe-watcher/node_modules/@mui/x-telemetry/esm/runtime/fetcher.js"],"sourcesContent":["async function fetchWithRetry(url, options, retries = 3) {\n  try {\n    const response = await fetch(url, options);\n    if (response.ok) {\n      return response;\n    }\n    throw new Error(`Request failed with status ${response.status}`);\n  } catch (error) {\n    if (retries === 0) {\n      throw error;\n    }\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(fetchWithRetry(url, options, retries - 1));\n      }, Math.random() * 3_000);\n    });\n  }\n}\nexport { fetchWithRetry };"],"mappings":"AAAA,eAAeA,cAAcA,CAACC,GAAG,EAAEC,OAAO,EAAEC,OAAO,GAAG,CAAC,EAAE;EACvD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,OAAO,CAAC;IAC1C,IAAIE,QAAQ,CAACE,EAAE,EAAE;MACf,OAAOF,QAAQ;IACjB;IACA,MAAM,IAAIG,KAAK,CAAC,8BAA8BH,QAAQ,CAACI,MAAM,EAAE,CAAC;EAClE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIN,OAAO,KAAK,CAAC,EAAE;MACjB,MAAMM,KAAK;IACb;IACA,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACfD,OAAO,CAACX,cAAc,CAACC,GAAG,EAAEC,OAAO,EAAEC,OAAO,GAAG,CAAC,CAAC,CAAC;MACpD,CAAC,EAAEU,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC;IAC3B,CAAC,CAAC;EACJ;AACF;AACA,SAASd,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}