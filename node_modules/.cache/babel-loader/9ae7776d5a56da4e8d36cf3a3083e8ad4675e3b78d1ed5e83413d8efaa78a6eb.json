{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport resolveComponentProps from '@mui/utils/resolveComponentProps';\nimport refType from '@mui/utils/refType';\nimport { extractValidationProps } from '@mui/x-date-pickers/validation';\nimport { usePickerAdapter } from '@mui/x-date-pickers/hooks';\nimport { rangeValueManager } from \"../internals/utils/valueManagers.js\";\nimport { useDateRangePickerDefaultizedProps } from \"../DateRangePicker/shared.js\";\nimport { renderDateRangeViewCalendar } from \"../dateRangeViewRenderers/index.js\";\nimport { SingleInputDateRangeField } from \"../SingleInputDateRangeField/index.js\";\nimport { useDesktopRangePicker } from \"../internals/hooks/useDesktopRangePicker/index.js\";\nimport { validateDateRange } from \"../validation/index.js\";\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DesktopDateRangePicker API](https://mui.com/x/api/date-pickers/desktop-date-range-picker/)\n */\nconst DesktopDateRangePicker = /*#__PURE__*/React.forwardRef(function DesktopDateRangePicker(inProps, ref) {\n  const adapter = usePickerAdapter();\n\n  // Props with the default values common to all date time pickers\n  const defaultizedProps = useDateRangePickerDefaultizedProps(inProps, 'MuiDesktopDateRangePicker');\n  const viewRenderers = _extends({\n    day: renderDateRangeViewCalendar\n  }, defaultizedProps.viewRenderers);\n  const props = _extends({}, defaultizedProps, {\n    closeOnSelect: defaultizedProps.closeOnSelect ?? true,\n    viewRenderers,\n    // TODO: Replace with resolveDateFormat() once we support month and year views\n    format: defaultizedProps.format ?? adapter.formats.keyboardDate,\n    calendars: defaultizedProps.calendars ?? 2,\n    views: ['day'],\n    openTo: 'day',\n    slots: _extends({\n      field: SingleInputDateRangeField\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => _extends({}, resolveComponentProps(defaultizedProps.slotProps?.field, ownerState), extractValidationProps(defaultizedProps)),\n      toolbar: _extends({\n        hidden: true\n      }, defaultizedProps.slotProps?.toolbar)\n    })\n  });\n  const {\n    renderPicker\n  } = useDesktopRangePicker({\n    ref,\n    props,\n    valueManager: rangeValueManager,\n    valueType: 'date',\n    validator: validateDateRange,\n    steps: null\n  });\n  return renderPicker();\n});\nif (process.env.NODE_ENV !== \"production\") DesktopDateRangePicker.displayName = \"DesktopDateRangePicker\";\nDesktopDateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The number of calendars to render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  className: PropTypes.string,\n  /**\n   * If `true`, the Picker will close after submitting the full date.\n   * @default true\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Position the current month is rendered in.\n   * @default 1\n   */\n  currentMonthCalendarPosition: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {PickerValidDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (date: PickerValidDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * The initial position in the edited date range.\n   * Used when the component is not controlled.\n   * @default 'start'\n   */\n  defaultRangePosition: PropTypes.oneOf(['end', 'start']),\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * When disabled, the value cannot be changed and no interaction is possible.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, editing dates by dragging is disabled.\n   * @default false\n   */\n  disableDragEditing: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * If `true`, the button to open the Picker will not be rendered (it will only render the field).\n   * @deprecated Use the [field component](https://mui.com/x/react-date-pickers/fields/) instead.\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n  /**\n   * @default true\n   */\n  enableAccessibleFieldDOMStructure: PropTypes.any,\n  /**\n   * The day view will show as many weeks as needed after the end of the current month to match this value.\n   * Put it to 6 to have a fixed number of weeks in Gregorian calendars\n   */\n  fixedWeekNumber: PropTypes.number,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable date.\n   * @default 2099-12-31\n   */\n  maxDate: PropTypes.object,\n  /**\n   * Minimal selectable date.\n   * @default 1900-01-01\n   */\n  minDate: PropTypes.object,\n  /**\n   * Name attribute used by the `input` element in the Field.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated with the current value changes.\n   * When a validation error is detected, the `error` parameter contains a non-null value.\n   * This can be used to render an appropriate form error.\n   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.\n   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.\n   * @param {TError} error The reason why the current value is not valid.\n   * @param {TValue} value The value associated with the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired on month change.\n   * @param {PickerValidDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the range position changes.\n   * @param {RangePosition} rangePosition The new range position.\n   */\n  onRangePositionChange: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The position in the currently edited date range.\n   * Used when the component position is controlled.\n   */\n  rangePosition: PropTypes.oneOf(['end', 'start']),\n  /**\n   * If `true`, the component is read-only.\n   * When read-only, the value cannot be changed but the user can interact with the interface.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.object), PropTypes.object]),\n  /**\n   * Component rendered on the \"day\" view when `props.loading` is true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => \"...\"\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * The currently selected sections.\n   * This prop accepts four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 3. If `\"all\"` is provided, all the sections will be selected.\n   * 4. If `null` is provided, no section will be selected.\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'empty', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number]),\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @param {PickerValidDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func\n  })\n};\nexport { DesktopDateRangePicker };","map":{"version":3,"names":["_extends","React","PropTypes","resolveComponentProps","refType","extractValidationProps","usePickerAdapter","rangeValueManager","useDateRangePickerDefaultizedProps","renderDateRangeViewCalendar","SingleInputDateRangeField","useDesktopRangePicker","validateDateRange","DesktopDateRangePicker","forwardRef","inProps","ref","adapter","defaultizedProps","viewRenderers","day","props","closeOnSelect","format","formats","keyboardDate","calendars","views","openTo","slots","field","slotProps","ownerState","toolbar","hidden","renderPicker","valueManager","valueType","validator","steps","process","env","NODE_ENV","displayName","propTypes","autoFocus","bool","oneOf","className","string","currentMonthCalendarPosition","dayOfWeekFormatter","func","defaultRangePosition","defaultValue","arrayOf","object","disableAutoMonthSwitching","disabled","disableDragEditing","disableFuture","disableHighlightToday","disableOpenPicker","disablePast","displayWeekNumber","enableAccessibleFieldDOMStructure","any","fixedWeekNumber","number","formatDensity","inputRef","label","node","loading","localeText","maxDate","minDate","name","onAccept","onChange","onClose","onError","onMonthChange","onOpen","onRangePositionChange","onSelectedSectionsChange","open","rangePosition","readOnly","reduceAnimations","referenceDate","oneOfType","renderLoading","selectedSections","shouldDisableDate","showDaysOutsideCurrentMonth","sx","timezone","value","shape"],"sources":["C:/Users/tamak/Desktop/Workspace/ppe-watcher/node_modules/@mui/x-date-pickers-pro/esm/DesktopDateRangePicker/DesktopDateRangePicker.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport resolveComponentProps from '@mui/utils/resolveComponentProps';\nimport refType from '@mui/utils/refType';\nimport { extractValidationProps } from '@mui/x-date-pickers/validation';\nimport { usePickerAdapter } from '@mui/x-date-pickers/hooks';\nimport { rangeValueManager } from \"../internals/utils/valueManagers.js\";\nimport { useDateRangePickerDefaultizedProps } from \"../DateRangePicker/shared.js\";\nimport { renderDateRangeViewCalendar } from \"../dateRangeViewRenderers/index.js\";\nimport { SingleInputDateRangeField } from \"../SingleInputDateRangeField/index.js\";\nimport { useDesktopRangePicker } from \"../internals/hooks/useDesktopRangePicker/index.js\";\nimport { validateDateRange } from \"../validation/index.js\";\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DesktopDateRangePicker API](https://mui.com/x/api/date-pickers/desktop-date-range-picker/)\n */\nconst DesktopDateRangePicker = /*#__PURE__*/React.forwardRef(function DesktopDateRangePicker(inProps, ref) {\n  const adapter = usePickerAdapter();\n\n  // Props with the default values common to all date time pickers\n  const defaultizedProps = useDateRangePickerDefaultizedProps(inProps, 'MuiDesktopDateRangePicker');\n  const viewRenderers = _extends({\n    day: renderDateRangeViewCalendar\n  }, defaultizedProps.viewRenderers);\n  const props = _extends({}, defaultizedProps, {\n    closeOnSelect: defaultizedProps.closeOnSelect ?? true,\n    viewRenderers,\n    // TODO: Replace with resolveDateFormat() once we support month and year views\n    format: defaultizedProps.format ?? adapter.formats.keyboardDate,\n    calendars: defaultizedProps.calendars ?? 2,\n    views: ['day'],\n    openTo: 'day',\n    slots: _extends({\n      field: SingleInputDateRangeField\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => _extends({}, resolveComponentProps(defaultizedProps.slotProps?.field, ownerState), extractValidationProps(defaultizedProps)),\n      toolbar: _extends({\n        hidden: true\n      }, defaultizedProps.slotProps?.toolbar)\n    })\n  });\n  const {\n    renderPicker\n  } = useDesktopRangePicker({\n    ref,\n    props,\n    valueManager: rangeValueManager,\n    valueType: 'date',\n    validator: validateDateRange,\n    steps: null\n  });\n  return renderPicker();\n});\nif (process.env.NODE_ENV !== \"production\") DesktopDateRangePicker.displayName = \"DesktopDateRangePicker\";\nDesktopDateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The number of calendars to render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  className: PropTypes.string,\n  /**\n   * If `true`, the Picker will close after submitting the full date.\n   * @default true\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Position the current month is rendered in.\n   * @default 1\n   */\n  currentMonthCalendarPosition: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {PickerValidDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (date: PickerValidDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * The initial position in the edited date range.\n   * Used when the component is not controlled.\n   * @default 'start'\n   */\n  defaultRangePosition: PropTypes.oneOf(['end', 'start']),\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * When disabled, the value cannot be changed and no interaction is possible.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, editing dates by dragging is disabled.\n   * @default false\n   */\n  disableDragEditing: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * If `true`, the button to open the Picker will not be rendered (it will only render the field).\n   * @deprecated Use the [field component](https://mui.com/x/react-date-pickers/fields/) instead.\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n  /**\n   * @default true\n   */\n  enableAccessibleFieldDOMStructure: PropTypes.any,\n  /**\n   * The day view will show as many weeks as needed after the end of the current month to match this value.\n   * Put it to 6 to have a fixed number of weeks in Gregorian calendars\n   */\n  fixedWeekNumber: PropTypes.number,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable date.\n   * @default 2099-12-31\n   */\n  maxDate: PropTypes.object,\n  /**\n   * Minimal selectable date.\n   * @default 1900-01-01\n   */\n  minDate: PropTypes.object,\n  /**\n   * Name attribute used by the `input` element in the Field.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated with the current value changes.\n   * When a validation error is detected, the `error` parameter contains a non-null value.\n   * This can be used to render an appropriate form error.\n   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.\n   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.\n   * @param {TError} error The reason why the current value is not valid.\n   * @param {TValue} value The value associated with the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired on month change.\n   * @param {PickerValidDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the range position changes.\n   * @param {RangePosition} rangePosition The new range position.\n   */\n  onRangePositionChange: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The position in the currently edited date range.\n   * Used when the component position is controlled.\n   */\n  rangePosition: PropTypes.oneOf(['end', 'start']),\n  /**\n   * If `true`, the component is read-only.\n   * When read-only, the value cannot be changed but the user can interact with the interface.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n   */\n  referenceDate: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.object), PropTypes.object]),\n  /**\n   * Component rendered on the \"day\" view when `props.loading` is true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => \"...\"\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * The currently selected sections.\n   * This prop accepts four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 3. If `\"all\"` is provided, all the sections will be selected.\n   * 4. If `null` is provided, no section will be selected.\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'empty', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number]),\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @param {PickerValidDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func\n  })\n};\nexport { DesktopDateRangePicker };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}