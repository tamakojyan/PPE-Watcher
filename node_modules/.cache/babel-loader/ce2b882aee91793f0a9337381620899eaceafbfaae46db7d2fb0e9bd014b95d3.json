{"ast":null,"code":"import { validateTime } from '@mui/x-date-pickers/validation';\nimport { isRangeValid } from \"../internals/utils/date-utils.js\";\nimport { rangeValueManager } from \"../internals/utils/valueManagers.js\";\n\n/**\n * Validation props used by the Time Range Picker and Time Range Field.\n */\n\n/**\n * Validation props as received by the validateTimeRange method.\n */\n\n/**\n * Name of the props that should be defaulted before being passed to the validateTimeRange method.\n */\n\nexport const validateTimeRange = ({\n  adapter,\n  value,\n  timezone,\n  props\n}) => {\n  const [start, end] = value;\n  const dateTimeValidations = [validateTime({\n    adapter,\n    value: start,\n    timezone,\n    props\n  }), validateTime({\n    adapter,\n    value: end,\n    timezone,\n    props\n  })];\n  if (dateTimeValidations[0] || dateTimeValidations[1]) {\n    return dateTimeValidations;\n  }\n\n  // for partial input\n  if (start === null || end === null) {\n    return [null, null];\n  }\n  if (!isRangeValid(adapter, value)) {\n    return ['invalidRange', 'invalidRange'];\n  }\n  return [null, null];\n};\nvalidateTimeRange.valueManager = rangeValueManager;","map":{"version":3,"names":["validateTime","isRangeValid","rangeValueManager","validateTimeRange","adapter","value","timezone","props","start","end","dateTimeValidations","valueManager"],"sources":["C:/Users/tamak/Desktop/Workspace/ppe-watcher/node_modules/@mui/x-date-pickers-pro/esm/validation/validateTimeRange.js"],"sourcesContent":["import { validateTime } from '@mui/x-date-pickers/validation';\nimport { isRangeValid } from \"../internals/utils/date-utils.js\";\nimport { rangeValueManager } from \"../internals/utils/valueManagers.js\";\n\n/**\n * Validation props used by the Time Range Picker and Time Range Field.\n */\n\n/**\n * Validation props as received by the validateTimeRange method.\n */\n\n/**\n * Name of the props that should be defaulted before being passed to the validateTimeRange method.\n */\n\nexport const validateTimeRange = ({\n  adapter,\n  value,\n  timezone,\n  props\n}) => {\n  const [start, end] = value;\n  const dateTimeValidations = [validateTime({\n    adapter,\n    value: start,\n    timezone,\n    props\n  }), validateTime({\n    adapter,\n    value: end,\n    timezone,\n    props\n  })];\n  if (dateTimeValidations[0] || dateTimeValidations[1]) {\n    return dateTimeValidations;\n  }\n\n  // for partial input\n  if (start === null || end === null) {\n    return [null, null];\n  }\n  if (!isRangeValid(adapter, value)) {\n    return ['invalidRange', 'invalidRange'];\n  }\n  return [null, null];\n};\nvalidateTimeRange.valueManager = rangeValueManager;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,gCAAgC;AAC7D,SAASC,YAAY,QAAQ,kCAAkC;AAC/D,SAASC,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAO,MAAMC,iBAAiB,GAAGA,CAAC;EAChCC,OAAO;EACPC,KAAK;EACLC,QAAQ;EACRC;AACF,CAAC,KAAK;EACJ,MAAM,CAACC,KAAK,EAAEC,GAAG,CAAC,GAAGJ,KAAK;EAC1B,MAAMK,mBAAmB,GAAG,CAACV,YAAY,CAAC;IACxCI,OAAO;IACPC,KAAK,EAAEG,KAAK;IACZF,QAAQ;IACRC;EACF,CAAC,CAAC,EAAEP,YAAY,CAAC;IACfI,OAAO;IACPC,KAAK,EAAEI,GAAG;IACVH,QAAQ;IACRC;EACF,CAAC,CAAC,CAAC;EACH,IAAIG,mBAAmB,CAAC,CAAC,CAAC,IAAIA,mBAAmB,CAAC,CAAC,CAAC,EAAE;IACpD,OAAOA,mBAAmB;EAC5B;;EAEA;EACA,IAAIF,KAAK,KAAK,IAAI,IAAIC,GAAG,KAAK,IAAI,EAAE;IAClC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;EACrB;EACA,IAAI,CAACR,YAAY,CAACG,OAAO,EAAEC,KAAK,CAAC,EAAE;IACjC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC;EACzC;EACA,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;AACrB,CAAC;AACDF,iBAAiB,CAACQ,YAAY,GAAGT,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}