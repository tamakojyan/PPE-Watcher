{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"value\", \"defaultValue\", \"referenceDate\", \"onChange\", \"className\", \"classes\", \"disableFuture\", \"disablePast\", \"minDate\", \"maxDate\", \"shouldDisableDate\", \"reduceAnimations\", \"onMonthChange\", \"rangePosition\", \"defaultRangePosition\", \"onRangePositionChange\", \"calendars\", \"currentMonthCalendarPosition\", \"slots\", \"slotProps\", \"loading\", \"renderLoading\", \"disableHighlightToday\", \"focusedView\", \"onFocusedViewChange\", \"readOnly\", \"disabled\", \"showDaysOutsideCurrentMonth\", \"dayOfWeekFormatter\", \"disableAutoMonthSwitching\", \"autoFocus\", \"fixedWeekNumber\", \"disableDragEditing\", \"displayWeekNumber\", \"timezone\", \"availableRangePositions\", \"views\", \"view\", \"openTo\", \"onViewChange\"],\n  _excluded2 = [\"isDragging\", \"rangeDragDay\", \"draggingDatePosition\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport resolveComponentProps from '@mui/utils/resolveComponentProps';\nimport useSlotProps from '@mui/utils/useSlotProps';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useId from '@mui/utils/useId';\nimport { Watermark } from '@mui/x-license';\nimport { DayCalendar, useReduceAnimations, useCalendarState, DEFAULT_DESKTOP_MODE_MEDIA_QUERY, useControlledValue, useViews, usePickerPrivateContext, areDatesEqual, useApplyDefaultValuesToDateValidationProps } from '@mui/x-date-pickers/internals';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { usePickerAdapter } from '@mui/x-date-pickers/hooks';\nimport { dateRangeCalendarClasses, getDateRangeCalendarUtilityClass } from \"./dateRangeCalendarClasses.js\";\nimport { isEndOfRange, isRangeValid, isStartOfRange, isWithinRange } from \"../internals/utils/date-utils.js\";\nimport { calculateRangeChange, calculateRangePreview, resolveReferenceDate } from \"../internals/utils/date-range-manager.js\";\nimport { DateRangePickerDay, dateRangePickerDayClasses as dayClasses } from \"../DateRangePickerDay/index.js\";\nimport { rangeValueManager } from \"../internals/utils/valueManagers.js\";\nimport { useDragRange } from \"./useDragRange.js\";\nimport { useRangePosition } from \"../internals/hooks/useRangePosition.js\";\nimport { DAY_RANGE_SIZE, DAY_MARGIN } from \"../internals/constants/dimensions.js\";\nimport { PickersRangeCalendarHeader } from \"../PickersRangeCalendarHeader/index.js\";\nimport { useNullablePickerRangePositionContext } from \"../internals/hooks/useNullablePickerRangePositionContext.js\";\nimport { dateRangePickerDay2Classes } from \"../DateRangePickerDay2/index.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst releaseInfo = \"MTc1NTY0MDgwMDAwMA==\";\nconst DateRangeCalendarRoot = styled('div', {\n  name: 'MuiDateRangeCalendar',\n  slot: 'Root'\n})({\n  display: 'flex',\n  flexDirection: 'row'\n});\nconst DateRangeCalendarMonthContainer = styled('div', {\n  name: 'MuiDateRangeCalendar',\n  slot: 'Container',\n  overridesResolver: (_, styles) => styles.monthContainer // FIXME: Inconsistent naming with slot\n})(({\n  theme\n}) => ({\n  '&:not(:last-of-type)': {\n    borderRight: `1px solid ${(theme.vars || theme).palette.divider}`\n  }\n}));\nconst weeksContainerHeight = (DAY_RANGE_SIZE + DAY_MARGIN * 2) * 6;\nconst InnerDayCalendarForRange = styled(DayCalendar)(({\n  theme\n}) => ({\n  minWidth: 312,\n  minHeight: weeksContainerHeight,\n  [`&.${dateRangeCalendarClasses.dayDragging}`]: {\n    [`& .${dateRangePickerDay2Classes.root}, & .${dayClasses.day}`]: {\n      cursor: 'grabbing'\n    },\n    [`& .${dayClasses.root}:not(.${dayClasses.rangeIntervalDayHighlightStart}):not(.${dayClasses.rangeIntervalDayHighlightEnd}) .${dayClasses.day}:not(.${dayClasses.notSelectedDate})`]: {\n      // we can't override `PickersDay` background color here, because it's styles take precedence\n      opacity: 0.6\n    }\n  },\n  [`&:not(.${dateRangeCalendarClasses.dayDragging}) .${dayClasses.dayOutsideRangeInterval}`]: {\n    '@media (pointer: fine)': {\n      '&:hover': {\n        border: `1px solid ${(theme.vars || theme).palette.grey[500]}`\n      }\n    }\n  }\n}));\nconst DayCalendarForRange = InnerDayCalendarForRange;\nfunction useDateRangeCalendarDefaultizedProps(props, name) {\n  const themeProps = useThemeProps({\n    props,\n    name\n  });\n  const reduceAnimations = useReduceAnimations(themeProps.reduceAnimations);\n  const validationProps = useApplyDefaultValuesToDateValidationProps(themeProps);\n  return _extends({}, themeProps, validationProps, {\n    renderLoading: themeProps.renderLoading ?? (() => /*#__PURE__*/_jsx(\"span\", {\n      children: \"...\"\n    })),\n    reduceAnimations,\n    loading: props.loading ?? false,\n    openTo: themeProps.openTo ?? 'day',\n    views: themeProps.views ?? ['day'],\n    calendars: themeProps.calendars ?? 2,\n    disableDragEditing: themeProps.disableDragEditing ?? false,\n    availableRangePositions: themeProps.availableRangePositions ?? ['start', 'end']\n  });\n}\nconst useUtilityClasses = (classes, ownerState) => {\n  const slots = {\n    root: ['root'],\n    monthContainer: ['monthContainer'],\n    dayCalendar: [ownerState.isDraggingDay && 'dayDragging']\n  };\n  return composeClasses(slots, getDateRangeCalendarUtilityClass, classes);\n};\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n * - [DateRangeCalendar](https://mui.com/x/react-date-pickers/date-range-calendar/)\n *\n * API:\n *\n * - [DateRangeCalendar API](https://mui.com/x/api/date-pickers/date-range-calendar/)\n */\nconst DateRangeCalendar = /*#__PURE__*/React.forwardRef(function DateRangeCalendar(inProps, ref) {\n  const props = useDateRangeCalendarDefaultizedProps(inProps, 'MuiDateRangeCalendar');\n  const shouldHavePreview = useMediaQuery(DEFAULT_DESKTOP_MODE_MEDIA_QUERY, {\n    defaultMatches: false\n  });\n  const {\n      value: valueProp,\n      defaultValue,\n      referenceDate,\n      onChange,\n      className,\n      classes: classesProp,\n      disableFuture,\n      disablePast,\n      minDate,\n      maxDate,\n      shouldDisableDate,\n      reduceAnimations,\n      onMonthChange,\n      rangePosition: rangePositionProp,\n      defaultRangePosition: defaultRangePositionProp,\n      onRangePositionChange: onRangePositionChangeProp,\n      calendars,\n      currentMonthCalendarPosition = 1,\n      slots,\n      slotProps,\n      loading,\n      renderLoading,\n      disableHighlightToday,\n      focusedView: focusedViewProp,\n      onFocusedViewChange,\n      readOnly,\n      disabled,\n      showDaysOutsideCurrentMonth,\n      dayOfWeekFormatter,\n      disableAutoMonthSwitching,\n      autoFocus,\n      fixedWeekNumber,\n      disableDragEditing,\n      displayWeekNumber,\n      timezone: timezoneProp,\n      availableRangePositions,\n      views,\n      view: inView,\n      openTo,\n      onViewChange\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const rangePositionContext = useNullablePickerRangePositionContext();\n  const {\n    value,\n    handleValueChange,\n    timezone\n  } = useControlledValue({\n    name: 'DateRangeCalendar',\n    timezone: timezoneProp,\n    value: valueProp,\n    referenceDate,\n    defaultValue,\n    onChange,\n    valueManager: rangeValueManager\n  });\n  const {\n    view,\n    setFocusedView,\n    focusedView,\n    setValueAndGoToNextView\n  } = useViews({\n    view: inView,\n    views,\n    openTo,\n    onChange: handleValueChange,\n    onViewChange,\n    autoFocus,\n    focusedView: focusedViewProp,\n    onFocusedViewChange\n  });\n  const adapter = usePickerAdapter();\n  const id = useId();\n  const {\n    rangePosition,\n    setRangePosition\n  } = useRangePosition({\n    rangePosition: rangePositionProp ?? rangePositionContext?.rangePosition,\n    defaultRangePosition: defaultRangePositionProp,\n    onRangePositionChange: onRangePositionChangeProp ?? rangePositionContext?.setRangePosition\n  });\n  const handleDatePositionChange = useEventCallback(position => {\n    if (rangePosition !== position) {\n      setRangePosition(position);\n    }\n  });\n  const handleSelectedDayChange = useEventCallback((newDate, selectionState, allowRangeFlip = false) => {\n    const {\n      nextSelection,\n      newRange\n    } = calculateRangeChange({\n      newDate,\n      adapter,\n      range: value,\n      rangePosition,\n      allowRangeFlip,\n      shouldMergeDateAndTime: true,\n      referenceDate\n    });\n    const isNextSectionAvailable = availableRangePositions.includes(nextSelection);\n    if (isNextSectionAvailable) {\n      setRangePosition(nextSelection);\n    }\n    const isFullRangeSelected = rangePosition === 'end' && isRangeValid(adapter, newRange);\n    setValueAndGoToNextView(newRange, isFullRangeSelected || !isNextSectionAvailable ? 'finish' : 'partial', view);\n  });\n  const handleDrop = useEventCallback(newDate => {\n    handleSelectedDayChange(newDate, undefined, true);\n  });\n  const shouldDisableDragEditing = disableDragEditing || disabled || readOnly;\n\n  // Range going for the start of the start day to the end of the end day.\n  // This makes sure that `isWithinRange` works with any time in the start and end day.\n  const valueDayRange = React.useMemo(() => [!adapter.isValid(value[0]) ? value[0] : adapter.startOfDay(value[0]), !adapter.isValid(value[1]) ? value[1] : adapter.endOfDay(value[1])], [value, adapter]);\n  const _useDragRange = useDragRange({\n      disableDragEditing: shouldDisableDragEditing,\n      onDrop: handleDrop,\n      onDatePositionChange: handleDatePositionChange,\n      adapter,\n      dateRange: valueDayRange,\n      timezone\n    }),\n    {\n      isDragging,\n      rangeDragDay,\n      draggingDatePosition\n    } = _useDragRange,\n    dragEventHandlers = _objectWithoutPropertiesLoose(_useDragRange, _excluded2);\n  const {\n    ownerState: pickersOwnerState\n  } = usePickerPrivateContext();\n  const ownerState = _extends({}, pickersOwnerState, {\n    isDraggingDay: isDragging\n  });\n  const classes = useUtilityClasses(classesProp, ownerState);\n  const draggingRange = React.useMemo(() => {\n    if (!valueDayRange[0] || !valueDayRange[1] || !rangeDragDay) {\n      return [null, null];\n    }\n    const newRange = calculateRangeChange({\n      adapter,\n      range: valueDayRange,\n      newDate: rangeDragDay,\n      rangePosition,\n      allowRangeFlip: true\n    }).newRange;\n    return newRange[0] !== null && newRange[1] !== null ? [adapter.startOfDay(newRange[0]), adapter.endOfDay(newRange[1])] : newRange;\n  }, [rangePosition, rangeDragDay, adapter, valueDayRange]);\n  const wrappedShouldDisableDate = React.useMemo(() => {\n    if (!shouldDisableDate) {\n      return undefined;\n    }\n    return dayToTest => shouldDisableDate(dayToTest, draggingDatePosition || rangePosition);\n  }, [shouldDisableDate, rangePosition, draggingDatePosition]);\n  const {\n    calendarState,\n    setVisibleDate,\n    onMonthSwitchingAnimationEnd\n  } = useCalendarState({\n    value: value[0] || value[1],\n    referenceDate: resolveReferenceDate(referenceDate, rangePosition),\n    disableFuture,\n    disablePast,\n    maxDate,\n    minDate,\n    onMonthChange,\n    reduceAnimations,\n    shouldDisableDate: wrappedShouldDisableDate,\n    timezone,\n    getCurrentMonthFromVisibleDate: (visibleDate, prevMonth) => {\n      const firstVisibleMonth = adapter.addMonths(prevMonth, 1 - currentMonthCalendarPosition);\n      const lastVisibleMonth = adapter.endOfMonth(adapter.addMonths(firstVisibleMonth, calendars - 1));\n\n      // The new focused day is inside the visible calendars,\n      // Do not change the current month\n      if (adapter.isWithinRange(visibleDate, [firstVisibleMonth, lastVisibleMonth])) {\n        return prevMonth;\n      }\n\n      // The new focused day is after the last visible month,\n      // Move the current month so that the new focused day is inside the first visible month\n      if (adapter.isAfter(visibleDate, lastVisibleMonth)) {\n        return adapter.startOfMonth(adapter.addMonths(visibleDate, currentMonthCalendarPosition - 1));\n      }\n\n      // The new focused day is before the first visible month,\n      // Move the current month so that the new focused day is inside the last visible month\n      return adapter.startOfMonth(adapter.addMonths(visibleDate, currentMonthCalendarPosition - calendars));\n    }\n  });\n  const CalendarHeader = slots?.calendarHeader ?? PickersRangeCalendarHeader;\n  const calendarHeaderProps = useSlotProps({\n    elementType: CalendarHeader,\n    externalSlotProps: slotProps?.calendarHeader,\n    additionalProps: {\n      calendars,\n      views: ['day'],\n      view: 'day',\n      currentMonth: calendarState.currentMonth,\n      onMonthChange: month => setVisibleDate({\n        target: month,\n        reason: 'header-navigation'\n      }),\n      minDate,\n      maxDate,\n      disabled,\n      disablePast,\n      disableFuture,\n      reduceAnimations,\n      timezone,\n      slots,\n      slotProps\n    },\n    ownerState\n  });\n\n  // TODO: Move this logic inside the render instead of using an effect\n  const prevValue = React.useRef(null);\n  React.useEffect(() => {\n    const date = rangePosition === 'start' ? value[0] : value[1];\n    if (!adapter.isValid(date)) {\n      return;\n    }\n    const prevDate = rangePosition === 'start' ? prevValue.current?.[0] : prevValue.current?.[1];\n    prevValue.current = value;\n\n    // The current date did not change, this call comes either from a `rangePosition` change or a change in the other date.\n    // In both cases, we don't want to change the visible month(s).\n    if (disableAutoMonthSwitching && prevDate && adapter.isEqual(prevDate, date)) {\n      return;\n    }\n    const displayingMonthRange = calendars - currentMonthCalendarPosition;\n    const currentMonthNumber = adapter.getMonth(calendarState.currentMonth);\n    const requestedMonthNumber = adapter.getMonth(date);\n    if (!adapter.isSameYear(calendarState.currentMonth, date) || requestedMonthNumber < currentMonthNumber || requestedMonthNumber > currentMonthNumber + displayingMonthRange) {\n      const newMonth = rangePosition === 'start' ? date :\n      // If need to focus end, scroll to the state when \"end\" is displaying in the last calendar\n      adapter.addMonths(date, -displayingMonthRange);\n      setVisibleDate({\n        target: newMonth,\n        reason: 'controlled-value-change'\n      });\n    }\n  }, [rangePosition, value]); // eslint-disable-line\n\n  const baseDateValidationProps = {\n    disablePast,\n    disableFuture,\n    maxDate,\n    minDate\n  };\n  const commonViewProps = {\n    disableHighlightToday,\n    readOnly,\n    disabled\n  };\n  const [rangePreviewDay, setRangePreviewDay] = React.useState(null);\n  const CalendarTransitionProps = React.useMemo(() => ({\n    onMouseLeave: () => setRangePreviewDay(null)\n  }), []);\n  const previewingRange = calculateRangePreview({\n    adapter,\n    range: valueDayRange,\n    newDate: rangePreviewDay,\n    rangePosition\n  });\n  const handleDayMouseEnter = useEventCallback((event, newRangePreviewDay) => {\n    let cleanNewRangePreviewDay;\n    if (valueDayRange[0] == null && valueDayRange[1] == null) {\n      cleanNewRangePreviewDay = null;\n    } else if (isWithinRange(adapter, newRangePreviewDay, valueDayRange)) {\n      cleanNewRangePreviewDay = null;\n    } else {\n      cleanNewRangePreviewDay = newRangePreviewDay;\n    }\n    if (!areDatesEqual(adapter, cleanNewRangePreviewDay, rangePreviewDay)) {\n      setRangePreviewDay(cleanNewRangePreviewDay);\n    }\n  });\n  const slotsForDayCalendar = _extends({\n    day: DateRangePickerDay\n  }, slots);\n  const slotPropsForDayCalendar = _extends({}, slotProps, {\n    day: dayOwnerState => {\n      const {\n        day,\n        isDaySelected\n      } = dayOwnerState;\n      const isSelectedStartDate = isStartOfRange(adapter, day, valueDayRange);\n      const isSelectedEndDate = isEndOfRange(adapter, day, valueDayRange);\n      const shouldInitDragging = !shouldDisableDragEditing && valueDayRange[0] && valueDayRange[1];\n      const isElementDraggable = shouldInitDragging && (isSelectedStartDate || isSelectedEndDate);\n      let datePosition;\n      if (isSelectedStartDate) {\n        datePosition = 'start';\n      } else if (isSelectedEndDate) {\n        datePosition = 'end';\n      }\n      const isStartOfHighlighting = isDragging ? isStartOfRange(adapter, day, draggingRange) : isSelectedStartDate;\n      const isEndOfHighlighting = isDragging ? isEndOfRange(adapter, day, draggingRange) : isSelectedEndDate;\n      return _extends({\n        isPreviewing: shouldHavePreview ? isWithinRange(adapter, day, previewingRange) : false,\n        isStartOfPreviewing: shouldHavePreview ? isStartOfRange(adapter, day, previewingRange) : false,\n        isEndOfPreviewing: shouldHavePreview ? isEndOfRange(adapter, day, previewingRange) : false,\n        isHighlighting: isWithinRange(adapter, day, isDragging ? draggingRange : valueDayRange),\n        isStartOfHighlighting,\n        isEndOfHighlighting: isDragging ? isEndOfRange(adapter, day, draggingRange) : isSelectedEndDate,\n        onMouseEnter: shouldHavePreview ? handleDayMouseEnter : undefined,\n        // apply selected styling to the dragging start or end day\n        isVisuallySelected: isDaySelected || isDragging && (isStartOfHighlighting || isEndOfHighlighting),\n        'data-position': datePosition\n      }, dragEventHandlers, {\n        draggable: isElementDraggable ? true : undefined\n      }, resolveComponentProps(slotProps?.day, dayOwnerState) ?? {});\n    }\n  });\n  const calendarMonths = React.useMemo(() => Array.from({\n    length: calendars\n  }).map((_, index) => index), [calendars]);\n  const visibleMonths = React.useMemo(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (currentMonthCalendarPosition > calendars || currentMonthCalendarPosition < 1) {\n        warnOnce(['MUI X: The `currentMonthCalendarPosition` prop must be an integer between `1` and the amount of calendars rendered.', 'For example if you have 2 calendars rendered, it should be equal to either 1 or 2.']);\n      }\n    }\n    const firstMonth = adapter.addMonths(calendarState.currentMonth, 1 - currentMonthCalendarPosition);\n    return Array.from({\n      length: calendars\n    }).map((_, index) => adapter.addMonths(firstMonth, index));\n  }, [adapter, calendarState.currentMonth, calendars, currentMonthCalendarPosition]);\n  const hasFocus = focusedView !== null;\n  const prevOpenViewRef = React.useRef(view);\n  React.useEffect(() => {\n    // If the view change and the focus was on the previous view\n    // Then we update the focus.\n    if (prevOpenViewRef.current === view) {\n      return;\n    }\n    if (focusedView === prevOpenViewRef.current) {\n      setFocusedView(view, true);\n    }\n    prevOpenViewRef.current = view;\n  }, [focusedView, setFocusedView, view]);\n  return /*#__PURE__*/_jsxs(DateRangeCalendarRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState\n  }, other, {\n    children: [/*#__PURE__*/_jsx(Watermark, {\n      packageName: \"x-date-pickers-pro\",\n      releaseInfo: releaseInfo\n    }), calendarMonths.map(monthIndex => {\n      const month = visibleMonths[monthIndex];\n      const labelId = `${id}-grid-${monthIndex}-label`;\n      return /*#__PURE__*/_jsxs(DateRangeCalendarMonthContainer, {\n        className: classes.monthContainer,\n        children: [/*#__PURE__*/_jsx(CalendarHeader, _extends({}, calendarHeaderProps, {\n          month: month,\n          monthIndex: monthIndex,\n          labelId: labelId\n        })), /*#__PURE__*/_jsx(DayCalendarForRange, _extends({\n          className: classes.dayCalendar\n        }, calendarState, baseDateValidationProps, commonViewProps, {\n          onMonthSwitchingAnimationEnd: onMonthSwitchingAnimationEnd,\n          onFocusedDayChange: focusedDate => setVisibleDate({\n            target: focusedDate,\n            reason: 'cell-interaction'\n          }),\n          reduceAnimations: reduceAnimations,\n          selectedDays: value,\n          onSelectedDaysChange: handleSelectedDayChange,\n          currentMonth: month,\n          TransitionProps: CalendarTransitionProps,\n          shouldDisableDate: wrappedShouldDisableDate,\n          hasFocus: hasFocus,\n          onFocusedViewChange: isViewFocused => setFocusedView('day', isViewFocused),\n          showDaysOutsideCurrentMonth: calendars === 1 && showDaysOutsideCurrentMonth,\n          dayOfWeekFormatter: dayOfWeekFormatter,\n          loading: loading,\n          renderLoading: renderLoading,\n          slots: slotsForDayCalendar,\n          slotProps: slotPropsForDayCalendar,\n          fixedWeekNumber: fixedWeekNumber,\n          displayWeekNumber: displayWeekNumber,\n          timezone: timezone,\n          gridLabelId: labelId\n        }))]\n      }, monthIndex);\n    })]\n  }));\n});\nif (process.env.NODE_ENV !== \"production\") DateRangeCalendar.displayName = \"DateRangeCalendar\";\nprocess.env.NODE_ENV !== \"production\" ? DateRangeCalendar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Range positions available for selection.\n   * This list is checked against when checking if a next range position can be selected.\n   *\n   * Used on Date Time Range pickers with current `rangePosition` to force a `finish` selection after just one range position selection.\n   * @default ['start', 'end']\n   */\n  availableRangePositions: PropTypes.arrayOf(PropTypes.oneOf(['end', 'start']).isRequired),\n  /**\n   * The number of calendars to render.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  /**\n   * Position the current month is rendered in.\n   * @default 1\n   */\n  currentMonthCalendarPosition: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {PickerValidDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (date: PickerValidDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * The initial position in the edited date range.\n   * Used when the component is not controlled.\n   * @default 'start'\n   */\n  defaultRangePosition: PropTypes.oneOf(['end', 'start']),\n  /**\n   * The default selected value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * When disabled, the value cannot be changed and no interaction is possible.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, editing dates by dragging is disabled.\n   * @default false\n   */\n  disableDragEditing: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n  /**\n   * The day view will show as many weeks as needed after the end of the current month to match this value.\n   * Put it to 6 to have a fixed number of weeks in Gregorian calendars\n   */\n  fixedWeekNumber: PropTypes.number,\n  /**\n   * Controlled focused view.\n   */\n  focusedView: PropTypes.oneOf(['day']),\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Maximal selectable date.\n   * @default 2099-12-31\n   */\n  maxDate: PropTypes.object,\n  /**\n   * Minimal selectable date.\n   * @default 1900-01-01\n   */\n  minDate: PropTypes.object,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.\n   * @template TView The view type. Will be one of date or time views.\n   * @param {TValue} value The new value.\n   * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.\n   * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired on focused view change.\n   * @template TView Type of the view. It will vary based on the Picker type and the `views` it uses.\n   * @param {TView} view The new view to focus or not.\n   * @param {boolean} hasFocus `true` if the view should be focused.\n   */\n  onFocusedViewChange: PropTypes.func,\n  /**\n   * Callback fired on month change.\n   * @param {PickerValidDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the range position changes.\n   * @param {RangePosition} rangePosition The new range position.\n   */\n  onRangePositionChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView Type of the view. It will vary based on the Picker type and the `views` it uses.\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['day']),\n  /**\n   * The position in the currently edited date range.\n   * Used when the component position is controlled.\n   */\n  rangePosition: PropTypes.oneOf(['end', 'start']),\n  /**\n   * If `true`, the component is read-only.\n   * When read-only, the value cannot be changed but the user can interact with the interface.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`.\n   */\n  referenceDate: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.object.isRequired), PropTypes.object]),\n  /**\n   * Component rendered on the \"day\" view when `props.loading` is true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => \"...\"\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @param {PickerValidDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['day']),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day']))\n} : void 0;\nexport { DateRangeCalendar };","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_excluded","_excluded2","React","PropTypes","clsx","useEventCallback","useMediaQuery","resolveComponentProps","useSlotProps","styled","useThemeProps","composeClasses","useId","Watermark","DayCalendar","useReduceAnimations","useCalendarState","DEFAULT_DESKTOP_MODE_MEDIA_QUERY","useControlledValue","useViews","usePickerPrivateContext","areDatesEqual","useApplyDefaultValuesToDateValidationProps","warnOnce","usePickerAdapter","dateRangeCalendarClasses","getDateRangeCalendarUtilityClass","isEndOfRange","isRangeValid","isStartOfRange","isWithinRange","calculateRangeChange","calculateRangePreview","resolveReferenceDate","DateRangePickerDay","dateRangePickerDayClasses","dayClasses","rangeValueManager","useDragRange","useRangePosition","DAY_RANGE_SIZE","DAY_MARGIN","PickersRangeCalendarHeader","useNullablePickerRangePositionContext","dateRangePickerDay2Classes","jsx","_jsx","jsxs","_jsxs","releaseInfo","DateRangeCalendarRoot","name","slot","display","flexDirection","DateRangeCalendarMonthContainer","overridesResolver","_","styles","monthContainer","theme","borderRight","vars","palette","divider","weeksContainerHeight","InnerDayCalendarForRange","minWidth","minHeight","dayDragging","root","day","cursor","rangeIntervalDayHighlightStart","rangeIntervalDayHighlightEnd","notSelectedDate","opacity","dayOutsideRangeInterval","border","grey","DayCalendarForRange","useDateRangeCalendarDefaultizedProps","props","themeProps","reduceAnimations","validationProps","renderLoading","children","loading","openTo","views","calendars","disableDragEditing","availableRangePositions","useUtilityClasses","classes","ownerState","slots","dayCalendar","isDraggingDay","DateRangeCalendar","forwardRef","inProps","ref","shouldHavePreview","defaultMatches","value","valueProp","defaultValue","referenceDate","onChange","className","classesProp","disableFuture","disablePast","minDate","maxDate","shouldDisableDate","onMonthChange","rangePosition","rangePositionProp","defaultRangePosition","defaultRangePositionProp","onRangePositionChange","onRangePositionChangeProp","currentMonthCalendarPosition","slotProps","disableHighlightToday","focusedView","focusedViewProp","onFocusedViewChange","readOnly","disabled","showDaysOutsideCurrentMonth","dayOfWeekFormatter","disableAutoMonthSwitching","autoFocus","fixedWeekNumber","displayWeekNumber","timezone","timezoneProp","view","inView","onViewChange","other","rangePositionContext","handleValueChange","valueManager","setFocusedView","setValueAndGoToNextView","adapter","id","setRangePosition","handleDatePositionChange","position","handleSelectedDayChange","newDate","selectionState","allowRangeFlip","nextSelection","newRange","range","shouldMergeDateAndTime","isNextSectionAvailable","includes","isFullRangeSelected","handleDrop","undefined","shouldDisableDragEditing","valueDayRange","useMemo","isValid","startOfDay","endOfDay","_useDragRange","onDrop","onDatePositionChange","dateRange","isDragging","rangeDragDay","draggingDatePosition","dragEventHandlers","pickersOwnerState","draggingRange","wrappedShouldDisableDate","dayToTest","calendarState","setVisibleDate","onMonthSwitchingAnimationEnd","getCurrentMonthFromVisibleDate","visibleDate","prevMonth","firstVisibleMonth","addMonths","lastVisibleMonth","endOfMonth","isAfter","startOfMonth","CalendarHeader","calendarHeader","calendarHeaderProps","elementType","externalSlotProps","additionalProps","currentMonth","month","target","reason","prevValue","useRef","useEffect","date","prevDate","current","isEqual","displayingMonthRange","currentMonthNumber","getMonth","requestedMonthNumber","isSameYear","newMonth","baseDateValidationProps","commonViewProps","rangePreviewDay","setRangePreviewDay","useState","CalendarTransitionProps","onMouseLeave","previewingRange","handleDayMouseEnter","event","newRangePreviewDay","cleanNewRangePreviewDay","slotsForDayCalendar","slotPropsForDayCalendar","dayOwnerState","isDaySelected","isSelectedStartDate","isSelectedEndDate","shouldInitDragging","isElementDraggable","datePosition","isStartOfHighlighting","isEndOfHighlighting","isPreviewing","isStartOfPreviewing","isEndOfPreviewing","isHighlighting","onMouseEnter","isVisuallySelected","draggable","calendarMonths","Array","from","length","map","index","visibleMonths","process","env","NODE_ENV","firstMonth","hasFocus","prevOpenViewRef","packageName","monthIndex","labelId","onFocusedDayChange","focusedDate","selectedDays","onSelectedDaysChange","TransitionProps","isViewFocused","gridLabelId","displayName","propTypes","bool","arrayOf","oneOf","isRequired","object","string","func","number","oneOfType","sx"],"sources":["C:/Users/tamak/Desktop/Workspace/ppe-watcher/node_modules/@mui/x-date-pickers-pro/esm/DateRangeCalendar/DateRangeCalendar.js"],"sourcesContent":["'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"value\", \"defaultValue\", \"referenceDate\", \"onChange\", \"className\", \"classes\", \"disableFuture\", \"disablePast\", \"minDate\", \"maxDate\", \"shouldDisableDate\", \"reduceAnimations\", \"onMonthChange\", \"rangePosition\", \"defaultRangePosition\", \"onRangePositionChange\", \"calendars\", \"currentMonthCalendarPosition\", \"slots\", \"slotProps\", \"loading\", \"renderLoading\", \"disableHighlightToday\", \"focusedView\", \"onFocusedViewChange\", \"readOnly\", \"disabled\", \"showDaysOutsideCurrentMonth\", \"dayOfWeekFormatter\", \"disableAutoMonthSwitching\", \"autoFocus\", \"fixedWeekNumber\", \"disableDragEditing\", \"displayWeekNumber\", \"timezone\", \"availableRangePositions\", \"views\", \"view\", \"openTo\", \"onViewChange\"],\n  _excluded2 = [\"isDragging\", \"rangeDragDay\", \"draggingDatePosition\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport resolveComponentProps from '@mui/utils/resolveComponentProps';\nimport useSlotProps from '@mui/utils/useSlotProps';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useId from '@mui/utils/useId';\nimport { Watermark } from '@mui/x-license';\nimport { DayCalendar, useReduceAnimations, useCalendarState, DEFAULT_DESKTOP_MODE_MEDIA_QUERY, useControlledValue, useViews, usePickerPrivateContext, areDatesEqual, useApplyDefaultValuesToDateValidationProps } from '@mui/x-date-pickers/internals';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { usePickerAdapter } from '@mui/x-date-pickers/hooks';\nimport { dateRangeCalendarClasses, getDateRangeCalendarUtilityClass } from \"./dateRangeCalendarClasses.js\";\nimport { isEndOfRange, isRangeValid, isStartOfRange, isWithinRange } from \"../internals/utils/date-utils.js\";\nimport { calculateRangeChange, calculateRangePreview, resolveReferenceDate } from \"../internals/utils/date-range-manager.js\";\nimport { DateRangePickerDay, dateRangePickerDayClasses as dayClasses } from \"../DateRangePickerDay/index.js\";\nimport { rangeValueManager } from \"../internals/utils/valueManagers.js\";\nimport { useDragRange } from \"./useDragRange.js\";\nimport { useRangePosition } from \"../internals/hooks/useRangePosition.js\";\nimport { DAY_RANGE_SIZE, DAY_MARGIN } from \"../internals/constants/dimensions.js\";\nimport { PickersRangeCalendarHeader } from \"../PickersRangeCalendarHeader/index.js\";\nimport { useNullablePickerRangePositionContext } from \"../internals/hooks/useNullablePickerRangePositionContext.js\";\nimport { dateRangePickerDay2Classes } from \"../DateRangePickerDay2/index.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst releaseInfo = \"MTc1NTY0MDgwMDAwMA==\";\nconst DateRangeCalendarRoot = styled('div', {\n  name: 'MuiDateRangeCalendar',\n  slot: 'Root'\n})({\n  display: 'flex',\n  flexDirection: 'row'\n});\nconst DateRangeCalendarMonthContainer = styled('div', {\n  name: 'MuiDateRangeCalendar',\n  slot: 'Container',\n  overridesResolver: (_, styles) => styles.monthContainer // FIXME: Inconsistent naming with slot\n})(({\n  theme\n}) => ({\n  '&:not(:last-of-type)': {\n    borderRight: `1px solid ${(theme.vars || theme).palette.divider}`\n  }\n}));\nconst weeksContainerHeight = (DAY_RANGE_SIZE + DAY_MARGIN * 2) * 6;\nconst InnerDayCalendarForRange = styled(DayCalendar)(({\n  theme\n}) => ({\n  minWidth: 312,\n  minHeight: weeksContainerHeight,\n  [`&.${dateRangeCalendarClasses.dayDragging}`]: {\n    [`& .${dateRangePickerDay2Classes.root}, & .${dayClasses.day}`]: {\n      cursor: 'grabbing'\n    },\n    [`& .${dayClasses.root}:not(.${dayClasses.rangeIntervalDayHighlightStart}):not(.${dayClasses.rangeIntervalDayHighlightEnd}) .${dayClasses.day}:not(.${dayClasses.notSelectedDate})`]: {\n      // we can't override `PickersDay` background color here, because it's styles take precedence\n      opacity: 0.6\n    }\n  },\n  [`&:not(.${dateRangeCalendarClasses.dayDragging}) .${dayClasses.dayOutsideRangeInterval}`]: {\n    '@media (pointer: fine)': {\n      '&:hover': {\n        border: `1px solid ${(theme.vars || theme).palette.grey[500]}`\n      }\n    }\n  }\n}));\nconst DayCalendarForRange = InnerDayCalendarForRange;\nfunction useDateRangeCalendarDefaultizedProps(props, name) {\n  const themeProps = useThemeProps({\n    props,\n    name\n  });\n  const reduceAnimations = useReduceAnimations(themeProps.reduceAnimations);\n  const validationProps = useApplyDefaultValuesToDateValidationProps(themeProps);\n  return _extends({}, themeProps, validationProps, {\n    renderLoading: themeProps.renderLoading ?? (() => /*#__PURE__*/_jsx(\"span\", {\n      children: \"...\"\n    })),\n    reduceAnimations,\n    loading: props.loading ?? false,\n    openTo: themeProps.openTo ?? 'day',\n    views: themeProps.views ?? ['day'],\n    calendars: themeProps.calendars ?? 2,\n    disableDragEditing: themeProps.disableDragEditing ?? false,\n    availableRangePositions: themeProps.availableRangePositions ?? ['start', 'end']\n  });\n}\nconst useUtilityClasses = (classes, ownerState) => {\n  const slots = {\n    root: ['root'],\n    monthContainer: ['monthContainer'],\n    dayCalendar: [ownerState.isDraggingDay && 'dayDragging']\n  };\n  return composeClasses(slots, getDateRangeCalendarUtilityClass, classes);\n};\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n * - [DateRangeCalendar](https://mui.com/x/react-date-pickers/date-range-calendar/)\n *\n * API:\n *\n * - [DateRangeCalendar API](https://mui.com/x/api/date-pickers/date-range-calendar/)\n */\nconst DateRangeCalendar = /*#__PURE__*/React.forwardRef(function DateRangeCalendar(inProps, ref) {\n  const props = useDateRangeCalendarDefaultizedProps(inProps, 'MuiDateRangeCalendar');\n  const shouldHavePreview = useMediaQuery(DEFAULT_DESKTOP_MODE_MEDIA_QUERY, {\n    defaultMatches: false\n  });\n  const {\n      value: valueProp,\n      defaultValue,\n      referenceDate,\n      onChange,\n      className,\n      classes: classesProp,\n      disableFuture,\n      disablePast,\n      minDate,\n      maxDate,\n      shouldDisableDate,\n      reduceAnimations,\n      onMonthChange,\n      rangePosition: rangePositionProp,\n      defaultRangePosition: defaultRangePositionProp,\n      onRangePositionChange: onRangePositionChangeProp,\n      calendars,\n      currentMonthCalendarPosition = 1,\n      slots,\n      slotProps,\n      loading,\n      renderLoading,\n      disableHighlightToday,\n      focusedView: focusedViewProp,\n      onFocusedViewChange,\n      readOnly,\n      disabled,\n      showDaysOutsideCurrentMonth,\n      dayOfWeekFormatter,\n      disableAutoMonthSwitching,\n      autoFocus,\n      fixedWeekNumber,\n      disableDragEditing,\n      displayWeekNumber,\n      timezone: timezoneProp,\n      availableRangePositions,\n      views,\n      view: inView,\n      openTo,\n      onViewChange\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const rangePositionContext = useNullablePickerRangePositionContext();\n  const {\n    value,\n    handleValueChange,\n    timezone\n  } = useControlledValue({\n    name: 'DateRangeCalendar',\n    timezone: timezoneProp,\n    value: valueProp,\n    referenceDate,\n    defaultValue,\n    onChange,\n    valueManager: rangeValueManager\n  });\n  const {\n    view,\n    setFocusedView,\n    focusedView,\n    setValueAndGoToNextView\n  } = useViews({\n    view: inView,\n    views,\n    openTo,\n    onChange: handleValueChange,\n    onViewChange,\n    autoFocus,\n    focusedView: focusedViewProp,\n    onFocusedViewChange\n  });\n  const adapter = usePickerAdapter();\n  const id = useId();\n  const {\n    rangePosition,\n    setRangePosition\n  } = useRangePosition({\n    rangePosition: rangePositionProp ?? rangePositionContext?.rangePosition,\n    defaultRangePosition: defaultRangePositionProp,\n    onRangePositionChange: onRangePositionChangeProp ?? rangePositionContext?.setRangePosition\n  });\n  const handleDatePositionChange = useEventCallback(position => {\n    if (rangePosition !== position) {\n      setRangePosition(position);\n    }\n  });\n  const handleSelectedDayChange = useEventCallback((newDate, selectionState, allowRangeFlip = false) => {\n    const {\n      nextSelection,\n      newRange\n    } = calculateRangeChange({\n      newDate,\n      adapter,\n      range: value,\n      rangePosition,\n      allowRangeFlip,\n      shouldMergeDateAndTime: true,\n      referenceDate\n    });\n    const isNextSectionAvailable = availableRangePositions.includes(nextSelection);\n    if (isNextSectionAvailable) {\n      setRangePosition(nextSelection);\n    }\n    const isFullRangeSelected = rangePosition === 'end' && isRangeValid(adapter, newRange);\n    setValueAndGoToNextView(newRange, isFullRangeSelected || !isNextSectionAvailable ? 'finish' : 'partial', view);\n  });\n  const handleDrop = useEventCallback(newDate => {\n    handleSelectedDayChange(newDate, undefined, true);\n  });\n  const shouldDisableDragEditing = disableDragEditing || disabled || readOnly;\n\n  // Range going for the start of the start day to the end of the end day.\n  // This makes sure that `isWithinRange` works with any time in the start and end day.\n  const valueDayRange = React.useMemo(() => [!adapter.isValid(value[0]) ? value[0] : adapter.startOfDay(value[0]), !adapter.isValid(value[1]) ? value[1] : adapter.endOfDay(value[1])], [value, adapter]);\n  const _useDragRange = useDragRange({\n      disableDragEditing: shouldDisableDragEditing,\n      onDrop: handleDrop,\n      onDatePositionChange: handleDatePositionChange,\n      adapter,\n      dateRange: valueDayRange,\n      timezone\n    }),\n    {\n      isDragging,\n      rangeDragDay,\n      draggingDatePosition\n    } = _useDragRange,\n    dragEventHandlers = _objectWithoutPropertiesLoose(_useDragRange, _excluded2);\n  const {\n    ownerState: pickersOwnerState\n  } = usePickerPrivateContext();\n  const ownerState = _extends({}, pickersOwnerState, {\n    isDraggingDay: isDragging\n  });\n  const classes = useUtilityClasses(classesProp, ownerState);\n  const draggingRange = React.useMemo(() => {\n    if (!valueDayRange[0] || !valueDayRange[1] || !rangeDragDay) {\n      return [null, null];\n    }\n    const newRange = calculateRangeChange({\n      adapter,\n      range: valueDayRange,\n      newDate: rangeDragDay,\n      rangePosition,\n      allowRangeFlip: true\n    }).newRange;\n    return newRange[0] !== null && newRange[1] !== null ? [adapter.startOfDay(newRange[0]), adapter.endOfDay(newRange[1])] : newRange;\n  }, [rangePosition, rangeDragDay, adapter, valueDayRange]);\n  const wrappedShouldDisableDate = React.useMemo(() => {\n    if (!shouldDisableDate) {\n      return undefined;\n    }\n    return dayToTest => shouldDisableDate(dayToTest, draggingDatePosition || rangePosition);\n  }, [shouldDisableDate, rangePosition, draggingDatePosition]);\n  const {\n    calendarState,\n    setVisibleDate,\n    onMonthSwitchingAnimationEnd\n  } = useCalendarState({\n    value: value[0] || value[1],\n    referenceDate: resolveReferenceDate(referenceDate, rangePosition),\n    disableFuture,\n    disablePast,\n    maxDate,\n    minDate,\n    onMonthChange,\n    reduceAnimations,\n    shouldDisableDate: wrappedShouldDisableDate,\n    timezone,\n    getCurrentMonthFromVisibleDate: (visibleDate, prevMonth) => {\n      const firstVisibleMonth = adapter.addMonths(prevMonth, 1 - currentMonthCalendarPosition);\n      const lastVisibleMonth = adapter.endOfMonth(adapter.addMonths(firstVisibleMonth, calendars - 1));\n\n      // The new focused day is inside the visible calendars,\n      // Do not change the current month\n      if (adapter.isWithinRange(visibleDate, [firstVisibleMonth, lastVisibleMonth])) {\n        return prevMonth;\n      }\n\n      // The new focused day is after the last visible month,\n      // Move the current month so that the new focused day is inside the first visible month\n      if (adapter.isAfter(visibleDate, lastVisibleMonth)) {\n        return adapter.startOfMonth(adapter.addMonths(visibleDate, currentMonthCalendarPosition - 1));\n      }\n\n      // The new focused day is before the first visible month,\n      // Move the current month so that the new focused day is inside the last visible month\n      return adapter.startOfMonth(adapter.addMonths(visibleDate, currentMonthCalendarPosition - calendars));\n    }\n  });\n  const CalendarHeader = slots?.calendarHeader ?? PickersRangeCalendarHeader;\n  const calendarHeaderProps = useSlotProps({\n    elementType: CalendarHeader,\n    externalSlotProps: slotProps?.calendarHeader,\n    additionalProps: {\n      calendars,\n      views: ['day'],\n      view: 'day',\n      currentMonth: calendarState.currentMonth,\n      onMonthChange: month => setVisibleDate({\n        target: month,\n        reason: 'header-navigation'\n      }),\n      minDate,\n      maxDate,\n      disabled,\n      disablePast,\n      disableFuture,\n      reduceAnimations,\n      timezone,\n      slots,\n      slotProps\n    },\n    ownerState\n  });\n\n  // TODO: Move this logic inside the render instead of using an effect\n  const prevValue = React.useRef(null);\n  React.useEffect(() => {\n    const date = rangePosition === 'start' ? value[0] : value[1];\n    if (!adapter.isValid(date)) {\n      return;\n    }\n    const prevDate = rangePosition === 'start' ? prevValue.current?.[0] : prevValue.current?.[1];\n    prevValue.current = value;\n\n    // The current date did not change, this call comes either from a `rangePosition` change or a change in the other date.\n    // In both cases, we don't want to change the visible month(s).\n    if (disableAutoMonthSwitching && prevDate && adapter.isEqual(prevDate, date)) {\n      return;\n    }\n    const displayingMonthRange = calendars - currentMonthCalendarPosition;\n    const currentMonthNumber = adapter.getMonth(calendarState.currentMonth);\n    const requestedMonthNumber = adapter.getMonth(date);\n    if (!adapter.isSameYear(calendarState.currentMonth, date) || requestedMonthNumber < currentMonthNumber || requestedMonthNumber > currentMonthNumber + displayingMonthRange) {\n      const newMonth = rangePosition === 'start' ? date :\n      // If need to focus end, scroll to the state when \"end\" is displaying in the last calendar\n      adapter.addMonths(date, -displayingMonthRange);\n      setVisibleDate({\n        target: newMonth,\n        reason: 'controlled-value-change'\n      });\n    }\n  }, [rangePosition, value]); // eslint-disable-line\n\n  const baseDateValidationProps = {\n    disablePast,\n    disableFuture,\n    maxDate,\n    minDate\n  };\n  const commonViewProps = {\n    disableHighlightToday,\n    readOnly,\n    disabled\n  };\n  const [rangePreviewDay, setRangePreviewDay] = React.useState(null);\n  const CalendarTransitionProps = React.useMemo(() => ({\n    onMouseLeave: () => setRangePreviewDay(null)\n  }), []);\n  const previewingRange = calculateRangePreview({\n    adapter,\n    range: valueDayRange,\n    newDate: rangePreviewDay,\n    rangePosition\n  });\n  const handleDayMouseEnter = useEventCallback((event, newRangePreviewDay) => {\n    let cleanNewRangePreviewDay;\n    if (valueDayRange[0] == null && valueDayRange[1] == null) {\n      cleanNewRangePreviewDay = null;\n    } else if (isWithinRange(adapter, newRangePreviewDay, valueDayRange)) {\n      cleanNewRangePreviewDay = null;\n    } else {\n      cleanNewRangePreviewDay = newRangePreviewDay;\n    }\n    if (!areDatesEqual(adapter, cleanNewRangePreviewDay, rangePreviewDay)) {\n      setRangePreviewDay(cleanNewRangePreviewDay);\n    }\n  });\n  const slotsForDayCalendar = _extends({\n    day: DateRangePickerDay\n  }, slots);\n  const slotPropsForDayCalendar = _extends({}, slotProps, {\n    day: dayOwnerState => {\n      const {\n        day,\n        isDaySelected\n      } = dayOwnerState;\n      const isSelectedStartDate = isStartOfRange(adapter, day, valueDayRange);\n      const isSelectedEndDate = isEndOfRange(adapter, day, valueDayRange);\n      const shouldInitDragging = !shouldDisableDragEditing && valueDayRange[0] && valueDayRange[1];\n      const isElementDraggable = shouldInitDragging && (isSelectedStartDate || isSelectedEndDate);\n      let datePosition;\n      if (isSelectedStartDate) {\n        datePosition = 'start';\n      } else if (isSelectedEndDate) {\n        datePosition = 'end';\n      }\n      const isStartOfHighlighting = isDragging ? isStartOfRange(adapter, day, draggingRange) : isSelectedStartDate;\n      const isEndOfHighlighting = isDragging ? isEndOfRange(adapter, day, draggingRange) : isSelectedEndDate;\n      return _extends({\n        isPreviewing: shouldHavePreview ? isWithinRange(adapter, day, previewingRange) : false,\n        isStartOfPreviewing: shouldHavePreview ? isStartOfRange(adapter, day, previewingRange) : false,\n        isEndOfPreviewing: shouldHavePreview ? isEndOfRange(adapter, day, previewingRange) : false,\n        isHighlighting: isWithinRange(adapter, day, isDragging ? draggingRange : valueDayRange),\n        isStartOfHighlighting,\n        isEndOfHighlighting: isDragging ? isEndOfRange(adapter, day, draggingRange) : isSelectedEndDate,\n        onMouseEnter: shouldHavePreview ? handleDayMouseEnter : undefined,\n        // apply selected styling to the dragging start or end day\n        isVisuallySelected: isDaySelected || isDragging && (isStartOfHighlighting || isEndOfHighlighting),\n        'data-position': datePosition\n      }, dragEventHandlers, {\n        draggable: isElementDraggable ? true : undefined\n      }, resolveComponentProps(slotProps?.day, dayOwnerState) ?? {});\n    }\n  });\n  const calendarMonths = React.useMemo(() => Array.from({\n    length: calendars\n  }).map((_, index) => index), [calendars]);\n  const visibleMonths = React.useMemo(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (currentMonthCalendarPosition > calendars || currentMonthCalendarPosition < 1) {\n        warnOnce(['MUI X: The `currentMonthCalendarPosition` prop must be an integer between `1` and the amount of calendars rendered.', 'For example if you have 2 calendars rendered, it should be equal to either 1 or 2.']);\n      }\n    }\n    const firstMonth = adapter.addMonths(calendarState.currentMonth, 1 - currentMonthCalendarPosition);\n    return Array.from({\n      length: calendars\n    }).map((_, index) => adapter.addMonths(firstMonth, index));\n  }, [adapter, calendarState.currentMonth, calendars, currentMonthCalendarPosition]);\n  const hasFocus = focusedView !== null;\n  const prevOpenViewRef = React.useRef(view);\n  React.useEffect(() => {\n    // If the view change and the focus was on the previous view\n    // Then we update the focus.\n    if (prevOpenViewRef.current === view) {\n      return;\n    }\n    if (focusedView === prevOpenViewRef.current) {\n      setFocusedView(view, true);\n    }\n    prevOpenViewRef.current = view;\n  }, [focusedView, setFocusedView, view]);\n  return /*#__PURE__*/_jsxs(DateRangeCalendarRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState\n  }, other, {\n    children: [/*#__PURE__*/_jsx(Watermark, {\n      packageName: \"x-date-pickers-pro\",\n      releaseInfo: releaseInfo\n    }), calendarMonths.map(monthIndex => {\n      const month = visibleMonths[monthIndex];\n      const labelId = `${id}-grid-${monthIndex}-label`;\n      return /*#__PURE__*/_jsxs(DateRangeCalendarMonthContainer, {\n        className: classes.monthContainer,\n        children: [/*#__PURE__*/_jsx(CalendarHeader, _extends({}, calendarHeaderProps, {\n          month: month,\n          monthIndex: monthIndex,\n          labelId: labelId\n        })), /*#__PURE__*/_jsx(DayCalendarForRange, _extends({\n          className: classes.dayCalendar\n        }, calendarState, baseDateValidationProps, commonViewProps, {\n          onMonthSwitchingAnimationEnd: onMonthSwitchingAnimationEnd,\n          onFocusedDayChange: focusedDate => setVisibleDate({\n            target: focusedDate,\n            reason: 'cell-interaction'\n          }),\n          reduceAnimations: reduceAnimations,\n          selectedDays: value,\n          onSelectedDaysChange: handleSelectedDayChange,\n          currentMonth: month,\n          TransitionProps: CalendarTransitionProps,\n          shouldDisableDate: wrappedShouldDisableDate,\n          hasFocus: hasFocus,\n          onFocusedViewChange: isViewFocused => setFocusedView('day', isViewFocused),\n          showDaysOutsideCurrentMonth: calendars === 1 && showDaysOutsideCurrentMonth,\n          dayOfWeekFormatter: dayOfWeekFormatter,\n          loading: loading,\n          renderLoading: renderLoading,\n          slots: slotsForDayCalendar,\n          slotProps: slotPropsForDayCalendar,\n          fixedWeekNumber: fixedWeekNumber,\n          displayWeekNumber: displayWeekNumber,\n          timezone: timezone,\n          gridLabelId: labelId\n        }))]\n      }, monthIndex);\n    })]\n  }));\n});\nif (process.env.NODE_ENV !== \"production\") DateRangeCalendar.displayName = \"DateRangeCalendar\";\nprocess.env.NODE_ENV !== \"production\" ? DateRangeCalendar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Range positions available for selection.\n   * This list is checked against when checking if a next range position can be selected.\n   *\n   * Used on Date Time Range pickers with current `rangePosition` to force a `finish` selection after just one range position selection.\n   * @default ['start', 'end']\n   */\n  availableRangePositions: PropTypes.arrayOf(PropTypes.oneOf(['end', 'start']).isRequired),\n  /**\n   * The number of calendars to render.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  /**\n   * Position the current month is rendered in.\n   * @default 1\n   */\n  currentMonthCalendarPosition: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {PickerValidDate} date The date of the day of week provided by the adapter.\n   * @returns {string} The name to display.\n   * @default (date: PickerValidDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * The initial position in the edited date range.\n   * Used when the component is not controlled.\n   * @default 'start'\n   */\n  defaultRangePosition: PropTypes.oneOf(['end', 'start']),\n  /**\n   * The default selected value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * When disabled, the value cannot be changed and no interaction is possible.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, editing dates by dragging is disabled.\n   * @default false\n   */\n  disableDragEditing: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n  /**\n   * The day view will show as many weeks as needed after the end of the current month to match this value.\n   * Put it to 6 to have a fixed number of weeks in Gregorian calendars\n   */\n  fixedWeekNumber: PropTypes.number,\n  /**\n   * Controlled focused view.\n   */\n  focusedView: PropTypes.oneOf(['day']),\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Maximal selectable date.\n   * @default 2099-12-31\n   */\n  maxDate: PropTypes.object,\n  /**\n   * Minimal selectable date.\n   * @default 1900-01-01\n   */\n  minDate: PropTypes.object,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.\n   * @template TView The view type. Will be one of date or time views.\n   * @param {TValue} value The new value.\n   * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.\n   * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired on focused view change.\n   * @template TView Type of the view. It will vary based on the Picker type and the `views` it uses.\n   * @param {TView} view The new view to focus or not.\n   * @param {boolean} hasFocus `true` if the view should be focused.\n   */\n  onFocusedViewChange: PropTypes.func,\n  /**\n   * Callback fired on month change.\n   * @param {PickerValidDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the range position changes.\n   * @param {RangePosition} rangePosition The new range position.\n   */\n  onRangePositionChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView Type of the view. It will vary based on the Picker type and the `views` it uses.\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['day']),\n  /**\n   * The position in the currently edited date range.\n   * Used when the component position is controlled.\n   */\n  rangePosition: PropTypes.oneOf(['end', 'start']),\n  /**\n   * If `true`, the component is read-only.\n   * When read-only, the value cannot be changed but the user can interact with the interface.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, disable heavy animations.\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\n   * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`.\n   */\n  referenceDate: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.object.isRequired), PropTypes.object]),\n  /**\n   * Component rendered on the \"day\" view when `props.loading` is true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => \"...\"\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @param {PickerValidDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['day']),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day']))\n} : void 0;\nexport { DateRangeCalendar };"],"mappings":"AAAA,YAAY;;AAEZ,OAAOA,6BAA6B,MAAM,yDAAyD;AACnG,OAAOC,QAAQ,MAAM,oCAAoC;AACzD,MAAMC,SAAS,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,eAAe,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,eAAe,EAAE,aAAa,EAAE,SAAS,EAAE,SAAS,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,eAAe,EAAE,eAAe,EAAE,sBAAsB,EAAE,uBAAuB,EAAE,WAAW,EAAE,8BAA8B,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,eAAe,EAAE,uBAAuB,EAAE,aAAa,EAAE,qBAAqB,EAAE,UAAU,EAAE,UAAU,EAAE,6BAA6B,EAAE,oBAAoB,EAAE,2BAA2B,EAAE,WAAW,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,UAAU,EAAE,yBAAyB,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,cAAc,CAAC;EACrrBC,UAAU,GAAG,CAAC,YAAY,EAAE,cAAc,EAAE,sBAAsB,CAAC;AACrE,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,gBAAgB,MAAM,6BAA6B;AAC1D,OAAOC,aAAa,MAAM,6BAA6B;AACvD,OAAOC,qBAAqB,MAAM,kCAAkC;AACpE,OAAOC,YAAY,MAAM,yBAAyB;AAClD,SAASC,MAAM,EAAEC,aAAa,QAAQ,sBAAsB;AAC5D,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,KAAK,MAAM,kBAAkB;AACpC,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,WAAW,EAAEC,mBAAmB,EAAEC,gBAAgB,EAAEC,gCAAgC,EAAEC,kBAAkB,EAAEC,QAAQ,EAAEC,uBAAuB,EAAEC,aAAa,EAAEC,0CAA0C,QAAQ,+BAA+B;AACtP,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,SAASC,wBAAwB,EAAEC,gCAAgC,QAAQ,+BAA+B;AAC1G,SAASC,YAAY,EAAEC,YAAY,EAAEC,cAAc,EAAEC,aAAa,QAAQ,kCAAkC;AAC5G,SAASC,oBAAoB,EAAEC,qBAAqB,EAAEC,oBAAoB,QAAQ,0CAA0C;AAC5H,SAASC,kBAAkB,EAAEC,yBAAyB,IAAIC,UAAU,QAAQ,gCAAgC;AAC5G,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,gBAAgB,QAAQ,wCAAwC;AACzE,SAASC,cAAc,EAAEC,UAAU,QAAQ,sCAAsC;AACjF,SAASC,0BAA0B,QAAQ,wCAAwC;AACnF,SAASC,qCAAqC,QAAQ,6DAA6D;AACnH,SAASC,0BAA0B,QAAQ,iCAAiC;AAC5E,SAASC,GAAG,IAAIC,IAAI,EAAEC,IAAI,IAAIC,KAAK,QAAQ,mBAAmB;AAC9D,MAAMC,WAAW,GAAG,sBAAsB;AAC1C,MAAMC,qBAAqB,GAAGzC,MAAM,CAAC,KAAK,EAAE;EAC1C0C,IAAI,EAAE,sBAAsB;EAC5BC,IAAI,EAAE;AACR,CAAC,CAAC,CAAC;EACDC,OAAO,EAAE,MAAM;EACfC,aAAa,EAAE;AACjB,CAAC,CAAC;AACF,MAAMC,+BAA+B,GAAG9C,MAAM,CAAC,KAAK,EAAE;EACpD0C,IAAI,EAAE,sBAAsB;EAC5BC,IAAI,EAAE,WAAW;EACjBI,iBAAiB,EAAEA,CAACC,CAAC,EAAEC,MAAM,KAAKA,MAAM,CAACC,cAAc,CAAC;AAC1D,CAAC,CAAC,CAAC,CAAC;EACFC;AACF,CAAC,MAAM;EACL,sBAAsB,EAAE;IACtBC,WAAW,EAAE,aAAa,CAACD,KAAK,CAACE,IAAI,IAAIF,KAAK,EAAEG,OAAO,CAACC,OAAO;EACjE;AACF,CAAC,CAAC,CAAC;AACH,MAAMC,oBAAoB,GAAG,CAACzB,cAAc,GAAGC,UAAU,GAAG,CAAC,IAAI,CAAC;AAClE,MAAMyB,wBAAwB,GAAGzD,MAAM,CAACK,WAAW,CAAC,CAAC,CAAC;EACpD8C;AACF,CAAC,MAAM;EACLO,QAAQ,EAAE,GAAG;EACbC,SAAS,EAAEH,oBAAoB;EAC/B,CAAC,KAAKxC,wBAAwB,CAAC4C,WAAW,EAAE,GAAG;IAC7C,CAAC,MAAMzB,0BAA0B,CAAC0B,IAAI,QAAQlC,UAAU,CAACmC,GAAG,EAAE,GAAG;MAC/DC,MAAM,EAAE;IACV,CAAC;IACD,CAAC,MAAMpC,UAAU,CAACkC,IAAI,SAASlC,UAAU,CAACqC,8BAA8B,UAAUrC,UAAU,CAACsC,4BAA4B,MAAMtC,UAAU,CAACmC,GAAG,SAASnC,UAAU,CAACuC,eAAe,GAAG,GAAG;MACpL;MACAC,OAAO,EAAE;IACX;EACF,CAAC;EACD,CAAC,UAAUnD,wBAAwB,CAAC4C,WAAW,MAAMjC,UAAU,CAACyC,uBAAuB,EAAE,GAAG;IAC1F,wBAAwB,EAAE;MACxB,SAAS,EAAE;QACTC,MAAM,EAAE,aAAa,CAAClB,KAAK,CAACE,IAAI,IAAIF,KAAK,EAAEG,OAAO,CAACgB,IAAI,CAAC,GAAG,CAAC;MAC9D;IACF;EACF;AACF,CAAC,CAAC,CAAC;AACH,MAAMC,mBAAmB,GAAGd,wBAAwB;AACpD,SAASe,oCAAoCA,CAACC,KAAK,EAAE/B,IAAI,EAAE;EACzD,MAAMgC,UAAU,GAAGzE,aAAa,CAAC;IAC/BwE,KAAK;IACL/B;EACF,CAAC,CAAC;EACF,MAAMiC,gBAAgB,GAAGrE,mBAAmB,CAACoE,UAAU,CAACC,gBAAgB,CAAC;EACzE,MAAMC,eAAe,GAAG/D,0CAA0C,CAAC6D,UAAU,CAAC;EAC9E,OAAOpF,QAAQ,CAAC,CAAC,CAAC,EAAEoF,UAAU,EAAEE,eAAe,EAAE;IAC/CC,aAAa,EAAEH,UAAU,CAACG,aAAa,KAAK,MAAM,aAAaxC,IAAI,CAAC,MAAM,EAAE;MAC1EyC,QAAQ,EAAE;IACZ,CAAC,CAAC,CAAC;IACHH,gBAAgB;IAChBI,OAAO,EAAEN,KAAK,CAACM,OAAO,IAAI,KAAK;IAC/BC,MAAM,EAAEN,UAAU,CAACM,MAAM,IAAI,KAAK;IAClCC,KAAK,EAAEP,UAAU,CAACO,KAAK,IAAI,CAAC,KAAK,CAAC;IAClCC,SAAS,EAAER,UAAU,CAACQ,SAAS,IAAI,CAAC;IACpCC,kBAAkB,EAAET,UAAU,CAACS,kBAAkB,IAAI,KAAK;IAC1DC,uBAAuB,EAAEV,UAAU,CAACU,uBAAuB,IAAI,CAAC,OAAO,EAAE,KAAK;EAChF,CAAC,CAAC;AACJ;AACA,MAAMC,iBAAiB,GAAGA,CAACC,OAAO,EAAEC,UAAU,KAAK;EACjD,MAAMC,KAAK,GAAG;IACZ3B,IAAI,EAAE,CAAC,MAAM,CAAC;IACdX,cAAc,EAAE,CAAC,gBAAgB,CAAC;IAClCuC,WAAW,EAAE,CAACF,UAAU,CAACG,aAAa,IAAI,aAAa;EACzD,CAAC;EACD,OAAOxF,cAAc,CAACsF,KAAK,EAAEvE,gCAAgC,EAAEqE,OAAO,CAAC;AACzE,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,iBAAiB,GAAG,aAAalG,KAAK,CAACmG,UAAU,CAAC,SAASD,iBAAiBA,CAACE,OAAO,EAAEC,GAAG,EAAE;EAC/F,MAAMrB,KAAK,GAAGD,oCAAoC,CAACqB,OAAO,EAAE,sBAAsB,CAAC;EACnF,MAAME,iBAAiB,GAAGlG,aAAa,CAACW,gCAAgC,EAAE;IACxEwF,cAAc,EAAE;EAClB,CAAC,CAAC;EACF,MAAM;MACFC,KAAK,EAAEC,SAAS;MAChBC,YAAY;MACZC,aAAa;MACbC,QAAQ;MACRC,SAAS;MACThB,OAAO,EAAEiB,WAAW;MACpBC,aAAa;MACbC,WAAW;MACXC,OAAO;MACPC,OAAO;MACPC,iBAAiB;MACjBjC,gBAAgB;MAChBkC,aAAa;MACbC,aAAa,EAAEC,iBAAiB;MAChCC,oBAAoB,EAAEC,wBAAwB;MAC9CC,qBAAqB,EAAEC,yBAAyB;MAChDjC,SAAS;MACTkC,4BAA4B,GAAG,CAAC;MAChC5B,KAAK;MACL6B,SAAS;MACTtC,OAAO;MACPF,aAAa;MACbyC,qBAAqB;MACrBC,WAAW,EAAEC,eAAe;MAC5BC,mBAAmB;MACnBC,QAAQ;MACRC,QAAQ;MACRC,2BAA2B;MAC3BC,kBAAkB;MAClBC,yBAAyB;MACzBC,SAAS;MACTC,eAAe;MACf7C,kBAAkB;MAClB8C,iBAAiB;MACjBC,QAAQ,EAAEC,YAAY;MACtB/C,uBAAuB;MACvBH,KAAK;MACLmD,IAAI,EAAEC,MAAM;MACZrD,MAAM;MACNsD;IACF,CAAC,GAAG7D,KAAK;IACT8D,KAAK,GAAGlJ,6BAA6B,CAACoF,KAAK,EAAElF,SAAS,CAAC;EACzD,MAAMiJ,oBAAoB,GAAGtG,qCAAqC,CAAC,CAAC;EACpE,MAAM;IACJ+D,KAAK;IACLwC,iBAAiB;IACjBP;EACF,CAAC,GAAGzH,kBAAkB,CAAC;IACrBiC,IAAI,EAAE,mBAAmB;IACzBwF,QAAQ,EAAEC,YAAY;IACtBlC,KAAK,EAAEC,SAAS;IAChBE,aAAa;IACbD,YAAY;IACZE,QAAQ;IACRqC,YAAY,EAAE9G;EAChB,CAAC,CAAC;EACF,MAAM;IACJwG,IAAI;IACJO,cAAc;IACdpB,WAAW;IACXqB;EACF,CAAC,GAAGlI,QAAQ,CAAC;IACX0H,IAAI,EAAEC,MAAM;IACZpD,KAAK;IACLD,MAAM;IACNqB,QAAQ,EAAEoC,iBAAiB;IAC3BH,YAAY;IACZP,SAAS;IACTR,WAAW,EAAEC,eAAe;IAC5BC;EACF,CAAC,CAAC;EACF,MAAMoB,OAAO,GAAG9H,gBAAgB,CAAC,CAAC;EAClC,MAAM+H,EAAE,GAAG3I,KAAK,CAAC,CAAC;EAClB,MAAM;IACJ2G,aAAa;IACbiC;EACF,CAAC,GAAGjH,gBAAgB,CAAC;IACnBgF,aAAa,EAAEC,iBAAiB,IAAIyB,oBAAoB,EAAE1B,aAAa;IACvEE,oBAAoB,EAAEC,wBAAwB;IAC9CC,qBAAqB,EAAEC,yBAAyB,IAAIqB,oBAAoB,EAAEO;EAC5E,CAAC,CAAC;EACF,MAAMC,wBAAwB,GAAGpJ,gBAAgB,CAACqJ,QAAQ,IAAI;IAC5D,IAAInC,aAAa,KAAKmC,QAAQ,EAAE;MAC9BF,gBAAgB,CAACE,QAAQ,CAAC;IAC5B;EACF,CAAC,CAAC;EACF,MAAMC,uBAAuB,GAAGtJ,gBAAgB,CAAC,CAACuJ,OAAO,EAAEC,cAAc,EAAEC,cAAc,GAAG,KAAK,KAAK;IACpG,MAAM;MACJC,aAAa;MACbC;IACF,CAAC,GAAGjI,oBAAoB,CAAC;MACvB6H,OAAO;MACPN,OAAO;MACPW,KAAK,EAAEvD,KAAK;MACZa,aAAa;MACbuC,cAAc;MACdI,sBAAsB,EAAE,IAAI;MAC5BrD;IACF,CAAC,CAAC;IACF,MAAMsD,sBAAsB,GAAGtE,uBAAuB,CAACuE,QAAQ,CAACL,aAAa,CAAC;IAC9E,IAAII,sBAAsB,EAAE;MAC1BX,gBAAgB,CAACO,aAAa,CAAC;IACjC;IACA,MAAMM,mBAAmB,GAAG9C,aAAa,KAAK,KAAK,IAAI3F,YAAY,CAAC0H,OAAO,EAAEU,QAAQ,CAAC;IACtFX,uBAAuB,CAACW,QAAQ,EAAEK,mBAAmB,IAAI,CAACF,sBAAsB,GAAG,QAAQ,GAAG,SAAS,EAAEtB,IAAI,CAAC;EAChH,CAAC,CAAC;EACF,MAAMyB,UAAU,GAAGjK,gBAAgB,CAACuJ,OAAO,IAAI;IAC7CD,uBAAuB,CAACC,OAAO,EAAEW,SAAS,EAAE,IAAI,CAAC;EACnD,CAAC,CAAC;EACF,MAAMC,wBAAwB,GAAG5E,kBAAkB,IAAIwC,QAAQ,IAAID,QAAQ;;EAE3E;EACA;EACA,MAAMsC,aAAa,GAAGvK,KAAK,CAACwK,OAAO,CAAC,MAAM,CAAC,CAACpB,OAAO,CAACqB,OAAO,CAACjE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG4C,OAAO,CAACsB,UAAU,CAAClE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC4C,OAAO,CAACqB,OAAO,CAACjE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG4C,OAAO,CAACuB,QAAQ,CAACnE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAACA,KAAK,EAAE4C,OAAO,CAAC,CAAC;EACvM,MAAMwB,aAAa,GAAGxI,YAAY,CAAC;MAC/BsD,kBAAkB,EAAE4E,wBAAwB;MAC5CO,MAAM,EAAET,UAAU;MAClBU,oBAAoB,EAAEvB,wBAAwB;MAC9CH,OAAO;MACP2B,SAAS,EAAER,aAAa;MACxB9B;IACF,CAAC,CAAC;IACF;MACEuC,UAAU;MACVC,YAAY;MACZC;IACF,CAAC,GAAGN,aAAa;IACjBO,iBAAiB,GAAGvL,6BAA6B,CAACgL,aAAa,EAAE7K,UAAU,CAAC;EAC9E,MAAM;IACJ+F,UAAU,EAAEsF;EACd,CAAC,GAAGlK,uBAAuB,CAAC,CAAC;EAC7B,MAAM4E,UAAU,GAAGjG,QAAQ,CAAC,CAAC,CAAC,EAAEuL,iBAAiB,EAAE;IACjDnF,aAAa,EAAE+E;EACjB,CAAC,CAAC;EACF,MAAMnF,OAAO,GAAGD,iBAAiB,CAACkB,WAAW,EAAEhB,UAAU,CAAC;EAC1D,MAAMuF,aAAa,GAAGrL,KAAK,CAACwK,OAAO,CAAC,MAAM;IACxC,IAAI,CAACD,aAAa,CAAC,CAAC,CAAC,IAAI,CAACA,aAAa,CAAC,CAAC,CAAC,IAAI,CAACU,YAAY,EAAE;MAC3D,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;IACrB;IACA,MAAMnB,QAAQ,GAAGjI,oBAAoB,CAAC;MACpCuH,OAAO;MACPW,KAAK,EAAEQ,aAAa;MACpBb,OAAO,EAAEuB,YAAY;MACrB5D,aAAa;MACbuC,cAAc,EAAE;IAClB,CAAC,CAAC,CAACE,QAAQ;IACX,OAAOA,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,GAAG,CAACV,OAAO,CAACsB,UAAU,CAACZ,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAEV,OAAO,CAACuB,QAAQ,CAACb,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,QAAQ;EACnI,CAAC,EAAE,CAACzC,aAAa,EAAE4D,YAAY,EAAE7B,OAAO,EAAEmB,aAAa,CAAC,CAAC;EACzD,MAAMe,wBAAwB,GAAGtL,KAAK,CAACwK,OAAO,CAAC,MAAM;IACnD,IAAI,CAACrD,iBAAiB,EAAE;MACtB,OAAOkD,SAAS;IAClB;IACA,OAAOkB,SAAS,IAAIpE,iBAAiB,CAACoE,SAAS,EAAEL,oBAAoB,IAAI7D,aAAa,CAAC;EACzF,CAAC,EAAE,CAACF,iBAAiB,EAAEE,aAAa,EAAE6D,oBAAoB,CAAC,CAAC;EAC5D,MAAM;IACJM,aAAa;IACbC,cAAc;IACdC;EACF,CAAC,GAAG5K,gBAAgB,CAAC;IACnB0F,KAAK,EAAEA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC;IAC3BG,aAAa,EAAE5E,oBAAoB,CAAC4E,aAAa,EAAEU,aAAa,CAAC;IACjEN,aAAa;IACbC,WAAW;IACXE,OAAO;IACPD,OAAO;IACPG,aAAa;IACblC,gBAAgB;IAChBiC,iBAAiB,EAAEmE,wBAAwB;IAC3C7C,QAAQ;IACRkD,8BAA8B,EAAEA,CAACC,WAAW,EAAEC,SAAS,KAAK;MAC1D,MAAMC,iBAAiB,GAAG1C,OAAO,CAAC2C,SAAS,CAACF,SAAS,EAAE,CAAC,GAAGlE,4BAA4B,CAAC;MACxF,MAAMqE,gBAAgB,GAAG5C,OAAO,CAAC6C,UAAU,CAAC7C,OAAO,CAAC2C,SAAS,CAACD,iBAAiB,EAAErG,SAAS,GAAG,CAAC,CAAC,CAAC;;MAEhG;MACA;MACA,IAAI2D,OAAO,CAACxH,aAAa,CAACgK,WAAW,EAAE,CAACE,iBAAiB,EAAEE,gBAAgB,CAAC,CAAC,EAAE;QAC7E,OAAOH,SAAS;MAClB;;MAEA;MACA;MACA,IAAIzC,OAAO,CAAC8C,OAAO,CAACN,WAAW,EAAEI,gBAAgB,CAAC,EAAE;QAClD,OAAO5C,OAAO,CAAC+C,YAAY,CAAC/C,OAAO,CAAC2C,SAAS,CAACH,WAAW,EAAEjE,4BAA4B,GAAG,CAAC,CAAC,CAAC;MAC/F;;MAEA;MACA;MACA,OAAOyB,OAAO,CAAC+C,YAAY,CAAC/C,OAAO,CAAC2C,SAAS,CAACH,WAAW,EAAEjE,4BAA4B,GAAGlC,SAAS,CAAC,CAAC;IACvG;EACF,CAAC,CAAC;EACF,MAAM2G,cAAc,GAAGrG,KAAK,EAAEsG,cAAc,IAAI7J,0BAA0B;EAC1E,MAAM8J,mBAAmB,GAAGhM,YAAY,CAAC;IACvCiM,WAAW,EAAEH,cAAc;IAC3BI,iBAAiB,EAAE5E,SAAS,EAAEyE,cAAc;IAC5CI,eAAe,EAAE;MACfhH,SAAS;MACTD,KAAK,EAAE,CAAC,KAAK,CAAC;MACdmD,IAAI,EAAE,KAAK;MACX+D,YAAY,EAAElB,aAAa,CAACkB,YAAY;MACxCtF,aAAa,EAAEuF,KAAK,IAAIlB,cAAc,CAAC;QACrCmB,MAAM,EAAED,KAAK;QACbE,MAAM,EAAE;MACV,CAAC,CAAC;MACF5F,OAAO;MACPC,OAAO;MACPgB,QAAQ;MACRlB,WAAW;MACXD,aAAa;MACb7B,gBAAgB;MAChBuD,QAAQ;MACR1C,KAAK;MACL6B;IACF,CAAC;IACD9B;EACF,CAAC,CAAC;;EAEF;EACA,MAAMgH,SAAS,GAAG9M,KAAK,CAAC+M,MAAM,CAAC,IAAI,CAAC;EACpC/M,KAAK,CAACgN,SAAS,CAAC,MAAM;IACpB,MAAMC,IAAI,GAAG5F,aAAa,KAAK,OAAO,GAAGb,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC;IAC5D,IAAI,CAAC4C,OAAO,CAACqB,OAAO,CAACwC,IAAI,CAAC,EAAE;MAC1B;IACF;IACA,MAAMC,QAAQ,GAAG7F,aAAa,KAAK,OAAO,GAAGyF,SAAS,CAACK,OAAO,GAAG,CAAC,CAAC,GAAGL,SAAS,CAACK,OAAO,GAAG,CAAC,CAAC;IAC5FL,SAAS,CAACK,OAAO,GAAG3G,KAAK;;IAEzB;IACA;IACA,IAAI6B,yBAAyB,IAAI6E,QAAQ,IAAI9D,OAAO,CAACgE,OAAO,CAACF,QAAQ,EAAED,IAAI,CAAC,EAAE;MAC5E;IACF;IACA,MAAMI,oBAAoB,GAAG5H,SAAS,GAAGkC,4BAA4B;IACrE,MAAM2F,kBAAkB,GAAGlE,OAAO,CAACmE,QAAQ,CAAC/B,aAAa,CAACkB,YAAY,CAAC;IACvE,MAAMc,oBAAoB,GAAGpE,OAAO,CAACmE,QAAQ,CAACN,IAAI,CAAC;IACnD,IAAI,CAAC7D,OAAO,CAACqE,UAAU,CAACjC,aAAa,CAACkB,YAAY,EAAEO,IAAI,CAAC,IAAIO,oBAAoB,GAAGF,kBAAkB,IAAIE,oBAAoB,GAAGF,kBAAkB,GAAGD,oBAAoB,EAAE;MAC1K,MAAMK,QAAQ,GAAGrG,aAAa,KAAK,OAAO,GAAG4F,IAAI;MACjD;MACA7D,OAAO,CAAC2C,SAAS,CAACkB,IAAI,EAAE,CAACI,oBAAoB,CAAC;MAC9C5B,cAAc,CAAC;QACbmB,MAAM,EAAEc,QAAQ;QAChBb,MAAM,EAAE;MACV,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACxF,aAAa,EAAEb,KAAK,CAAC,CAAC,CAAC,CAAC;;EAE5B,MAAMmH,uBAAuB,GAAG;IAC9B3G,WAAW;IACXD,aAAa;IACbG,OAAO;IACPD;EACF,CAAC;EACD,MAAM2G,eAAe,GAAG;IACtB/F,qBAAqB;IACrBI,QAAQ;IACRC;EACF,CAAC;EACD,MAAM,CAAC2F,eAAe,EAAEC,kBAAkB,CAAC,GAAG9N,KAAK,CAAC+N,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAMC,uBAAuB,GAAGhO,KAAK,CAACwK,OAAO,CAAC,OAAO;IACnDyD,YAAY,EAAEA,CAAA,KAAMH,kBAAkB,CAAC,IAAI;EAC7C,CAAC,CAAC,EAAE,EAAE,CAAC;EACP,MAAMI,eAAe,GAAGpM,qBAAqB,CAAC;IAC5CsH,OAAO;IACPW,KAAK,EAAEQ,aAAa;IACpBb,OAAO,EAAEmE,eAAe;IACxBxG;EACF,CAAC,CAAC;EACF,MAAM8G,mBAAmB,GAAGhO,gBAAgB,CAAC,CAACiO,KAAK,EAAEC,kBAAkB,KAAK;IAC1E,IAAIC,uBAAuB;IAC3B,IAAI/D,aAAa,CAAC,CAAC,CAAC,IAAI,IAAI,IAAIA,aAAa,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;MACxD+D,uBAAuB,GAAG,IAAI;IAChC,CAAC,MAAM,IAAI1M,aAAa,CAACwH,OAAO,EAAEiF,kBAAkB,EAAE9D,aAAa,CAAC,EAAE;MACpE+D,uBAAuB,GAAG,IAAI;IAChC,CAAC,MAAM;MACLA,uBAAuB,GAAGD,kBAAkB;IAC9C;IACA,IAAI,CAAClN,aAAa,CAACiI,OAAO,EAAEkF,uBAAuB,EAAET,eAAe,CAAC,EAAE;MACrEC,kBAAkB,CAACQ,uBAAuB,CAAC;IAC7C;EACF,CAAC,CAAC;EACF,MAAMC,mBAAmB,GAAG1O,QAAQ,CAAC;IACnCwE,GAAG,EAAErC;EACP,CAAC,EAAE+D,KAAK,CAAC;EACT,MAAMyI,uBAAuB,GAAG3O,QAAQ,CAAC,CAAC,CAAC,EAAE+H,SAAS,EAAE;IACtDvD,GAAG,EAAEoK,aAAa,IAAI;MACpB,MAAM;QACJpK,GAAG;QACHqK;MACF,CAAC,GAAGD,aAAa;MACjB,MAAME,mBAAmB,GAAGhN,cAAc,CAACyH,OAAO,EAAE/E,GAAG,EAAEkG,aAAa,CAAC;MACvE,MAAMqE,iBAAiB,GAAGnN,YAAY,CAAC2H,OAAO,EAAE/E,GAAG,EAAEkG,aAAa,CAAC;MACnE,MAAMsE,kBAAkB,GAAG,CAACvE,wBAAwB,IAAIC,aAAa,CAAC,CAAC,CAAC,IAAIA,aAAa,CAAC,CAAC,CAAC;MAC5F,MAAMuE,kBAAkB,GAAGD,kBAAkB,KAAKF,mBAAmB,IAAIC,iBAAiB,CAAC;MAC3F,IAAIG,YAAY;MAChB,IAAIJ,mBAAmB,EAAE;QACvBI,YAAY,GAAG,OAAO;MACxB,CAAC,MAAM,IAAIH,iBAAiB,EAAE;QAC5BG,YAAY,GAAG,KAAK;MACtB;MACA,MAAMC,qBAAqB,GAAGhE,UAAU,GAAGrJ,cAAc,CAACyH,OAAO,EAAE/E,GAAG,EAAEgH,aAAa,CAAC,GAAGsD,mBAAmB;MAC5G,MAAMM,mBAAmB,GAAGjE,UAAU,GAAGvJ,YAAY,CAAC2H,OAAO,EAAE/E,GAAG,EAAEgH,aAAa,CAAC,GAAGuD,iBAAiB;MACtG,OAAO/O,QAAQ,CAAC;QACdqP,YAAY,EAAE5I,iBAAiB,GAAG1E,aAAa,CAACwH,OAAO,EAAE/E,GAAG,EAAE6J,eAAe,CAAC,GAAG,KAAK;QACtFiB,mBAAmB,EAAE7I,iBAAiB,GAAG3E,cAAc,CAACyH,OAAO,EAAE/E,GAAG,EAAE6J,eAAe,CAAC,GAAG,KAAK;QAC9FkB,iBAAiB,EAAE9I,iBAAiB,GAAG7E,YAAY,CAAC2H,OAAO,EAAE/E,GAAG,EAAE6J,eAAe,CAAC,GAAG,KAAK;QAC1FmB,cAAc,EAAEzN,aAAa,CAACwH,OAAO,EAAE/E,GAAG,EAAE2G,UAAU,GAAGK,aAAa,GAAGd,aAAa,CAAC;QACvFyE,qBAAqB;QACrBC,mBAAmB,EAAEjE,UAAU,GAAGvJ,YAAY,CAAC2H,OAAO,EAAE/E,GAAG,EAAEgH,aAAa,CAAC,GAAGuD,iBAAiB;QAC/FU,YAAY,EAAEhJ,iBAAiB,GAAG6H,mBAAmB,GAAG9D,SAAS;QACjE;QACAkF,kBAAkB,EAAEb,aAAa,IAAI1D,UAAU,KAAKgE,qBAAqB,IAAIC,mBAAmB,CAAC;QACjG,eAAe,EAAEF;MACnB,CAAC,EAAE5D,iBAAiB,EAAE;QACpBqE,SAAS,EAAEV,kBAAkB,GAAG,IAAI,GAAGzE;MACzC,CAAC,EAAEhK,qBAAqB,CAACuH,SAAS,EAAEvD,GAAG,EAAEoK,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;IAChE;EACF,CAAC,CAAC;EACF,MAAMgB,cAAc,GAAGzP,KAAK,CAACwK,OAAO,CAAC,MAAMkF,KAAK,CAACC,IAAI,CAAC;IACpDC,MAAM,EAAEnK;EACV,CAAC,CAAC,CAACoK,GAAG,CAAC,CAACtM,CAAC,EAAEuM,KAAK,KAAKA,KAAK,CAAC,EAAE,CAACrK,SAAS,CAAC,CAAC;EACzC,MAAMsK,aAAa,GAAG/P,KAAK,CAACwK,OAAO,CAAC,MAAM;IACxC,IAAIwF,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAIvI,4BAA4B,GAAGlC,SAAS,IAAIkC,4BAA4B,GAAG,CAAC,EAAE;QAChFtG,QAAQ,CAAC,CAAC,qHAAqH,EAAE,oFAAoF,CAAC,CAAC;MACzN;IACF;IACA,MAAM8O,UAAU,GAAG/G,OAAO,CAAC2C,SAAS,CAACP,aAAa,CAACkB,YAAY,EAAE,CAAC,GAAG/E,4BAA4B,CAAC;IAClG,OAAO+H,KAAK,CAACC,IAAI,CAAC;MAChBC,MAAM,EAAEnK;IACV,CAAC,CAAC,CAACoK,GAAG,CAAC,CAACtM,CAAC,EAAEuM,KAAK,KAAK1G,OAAO,CAAC2C,SAAS,CAACoE,UAAU,EAAEL,KAAK,CAAC,CAAC;EAC5D,CAAC,EAAE,CAAC1G,OAAO,EAAEoC,aAAa,CAACkB,YAAY,EAAEjH,SAAS,EAAEkC,4BAA4B,CAAC,CAAC;EAClF,MAAMyI,QAAQ,GAAGtI,WAAW,KAAK,IAAI;EACrC,MAAMuI,eAAe,GAAGrQ,KAAK,CAAC+M,MAAM,CAACpE,IAAI,CAAC;EAC1C3I,KAAK,CAACgN,SAAS,CAAC,MAAM;IACpB;IACA;IACA,IAAIqD,eAAe,CAAClD,OAAO,KAAKxE,IAAI,EAAE;MACpC;IACF;IACA,IAAIb,WAAW,KAAKuI,eAAe,CAAClD,OAAO,EAAE;MAC3CjE,cAAc,CAACP,IAAI,EAAE,IAAI,CAAC;IAC5B;IACA0H,eAAe,CAAClD,OAAO,GAAGxE,IAAI;EAChC,CAAC,EAAE,CAACb,WAAW,EAAEoB,cAAc,EAAEP,IAAI,CAAC,CAAC;EACvC,OAAO,aAAa7F,KAAK,CAACE,qBAAqB,EAAEnD,QAAQ,CAAC;IACxDwG,GAAG,EAAEA,GAAG;IACRQ,SAAS,EAAE3G,IAAI,CAAC2F,OAAO,CAACzB,IAAI,EAAEyC,SAAS,CAAC;IACxCf,UAAU,EAAEA;EACd,CAAC,EAAEgD,KAAK,EAAE;IACRzD,QAAQ,EAAE,CAAC,aAAazC,IAAI,CAACjC,SAAS,EAAE;MACtC2P,WAAW,EAAE,oBAAoB;MACjCvN,WAAW,EAAEA;IACf,CAAC,CAAC,EAAE0M,cAAc,CAACI,GAAG,CAACU,UAAU,IAAI;MACnC,MAAM5D,KAAK,GAAGoD,aAAa,CAACQ,UAAU,CAAC;MACvC,MAAMC,OAAO,GAAG,GAAGnH,EAAE,SAASkH,UAAU,QAAQ;MAChD,OAAO,aAAazN,KAAK,CAACO,+BAA+B,EAAE;QACzDwD,SAAS,EAAEhB,OAAO,CAACpC,cAAc;QACjC4B,QAAQ,EAAE,CAAC,aAAazC,IAAI,CAACwJ,cAAc,EAAEvM,QAAQ,CAAC,CAAC,CAAC,EAAEyM,mBAAmB,EAAE;UAC7EK,KAAK,EAAEA,KAAK;UACZ4D,UAAU,EAAEA,UAAU;UACtBC,OAAO,EAAEA;QACX,CAAC,CAAC,CAAC,EAAE,aAAa5N,IAAI,CAACkC,mBAAmB,EAAEjF,QAAQ,CAAC;UACnDgH,SAAS,EAAEhB,OAAO,CAACG;QACrB,CAAC,EAAEwF,aAAa,EAAEmC,uBAAuB,EAAEC,eAAe,EAAE;UAC1DlC,4BAA4B,EAAEA,4BAA4B;UAC1D+E,kBAAkB,EAAEC,WAAW,IAAIjF,cAAc,CAAC;YAChDmB,MAAM,EAAE8D,WAAW;YACnB7D,MAAM,EAAE;UACV,CAAC,CAAC;UACF3H,gBAAgB,EAAEA,gBAAgB;UAClCyL,YAAY,EAAEnK,KAAK;UACnBoK,oBAAoB,EAAEnH,uBAAuB;UAC7CiD,YAAY,EAAEC,KAAK;UACnBkE,eAAe,EAAE7C,uBAAuB;UACxC7G,iBAAiB,EAAEmE,wBAAwB;UAC3C8E,QAAQ,EAAEA,QAAQ;UAClBpI,mBAAmB,EAAE8I,aAAa,IAAI5H,cAAc,CAAC,KAAK,EAAE4H,aAAa,CAAC;UAC1E3I,2BAA2B,EAAE1C,SAAS,KAAK,CAAC,IAAI0C,2BAA2B;UAC3EC,kBAAkB,EAAEA,kBAAkB;UACtC9C,OAAO,EAAEA,OAAO;UAChBF,aAAa,EAAEA,aAAa;UAC5BW,KAAK,EAAEwI,mBAAmB;UAC1B3G,SAAS,EAAE4G,uBAAuB;UAClCjG,eAAe,EAAEA,eAAe;UAChCC,iBAAiB,EAAEA,iBAAiB;UACpCC,QAAQ,EAAEA,QAAQ;UAClBsI,WAAW,EAAEP;QACf,CAAC,CAAC,CAAC;MACL,CAAC,EAAED,UAAU,CAAC;IAChB,CAAC,CAAC;EACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AACF,IAAIP,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAEhK,iBAAiB,CAAC8K,WAAW,GAAG,mBAAmB;AAC9FhB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGhK,iBAAiB,CAAC+K,SAAS,GAAG;EACpE;EACA;EACA;EACA;EACA;AACF;AACA;AACA;AACA;AACA;EACE3I,SAAS,EAAErI,SAAS,CAACiR,IAAI;EACzB;AACF;AACA;AACA;AACA;AACA;AACA;EACEvL,uBAAuB,EAAE1F,SAAS,CAACkR,OAAO,CAAClR,SAAS,CAACmR,KAAK,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAACC,UAAU,CAAC;EACxF;AACF;AACA;AACA;EACE5L,SAAS,EAAExF,SAAS,CAACmR,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACrC;AACF;AACA;EACEvL,OAAO,EAAE5F,SAAS,CAACqR,MAAM;EACzBzK,SAAS,EAAE5G,SAAS,CAACsR,MAAM;EAC3B;AACF;AACA;AACA;EACE5J,4BAA4B,EAAE1H,SAAS,CAACmR,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACxD;AACF;AACA;AACA;AACA;AACA;EACEhJ,kBAAkB,EAAEnI,SAAS,CAACuR,IAAI;EAClC;AACF;AACA;AACA;AACA;EACEjK,oBAAoB,EAAEtH,SAAS,CAACmR,KAAK,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;EACvD;AACF;AACA;AACA;EACE1K,YAAY,EAAEzG,SAAS,CAACkR,OAAO,CAAClR,SAAS,CAACqR,MAAM,CAAC;EACjD;AACF;AACA;AACA;EACEjJ,yBAAyB,EAAEpI,SAAS,CAACiR,IAAI;EACzC;AACF;AACA;AACA;AACA;EACEhJ,QAAQ,EAAEjI,SAAS,CAACiR,IAAI;EACxB;AACF;AACA;AACA;EACExL,kBAAkB,EAAEzF,SAAS,CAACiR,IAAI;EAClC;AACF;AACA;AACA;EACEnK,aAAa,EAAE9G,SAAS,CAACiR,IAAI;EAC7B;AACF;AACA;AACA;EACErJ,qBAAqB,EAAE5H,SAAS,CAACiR,IAAI;EACrC;AACF;AACA;AACA;EACElK,WAAW,EAAE/G,SAAS,CAACiR,IAAI;EAC3B;AACF;AACA;EACE1I,iBAAiB,EAAEvI,SAAS,CAACiR,IAAI;EACjC;AACF;AACA;AACA;EACE3I,eAAe,EAAEtI,SAAS,CAACwR,MAAM;EACjC;AACF;AACA;EACE3J,WAAW,EAAE7H,SAAS,CAACmR,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;EACrC;AACF;AACA;AACA;AACA;EACE9L,OAAO,EAAErF,SAAS,CAACiR,IAAI;EACvB;AACF;AACA;AACA;EACEhK,OAAO,EAAEjH,SAAS,CAACqR,MAAM;EACzB;AACF;AACA;AACA;EACErK,OAAO,EAAEhH,SAAS,CAACqR,MAAM;EACzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE1K,QAAQ,EAAE3G,SAAS,CAACuR,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;EACExJ,mBAAmB,EAAE/H,SAAS,CAACuR,IAAI;EACnC;AACF;AACA;AACA;EACEpK,aAAa,EAAEnH,SAAS,CAACuR,IAAI;EAC7B;AACF;AACA;AACA;EACE/J,qBAAqB,EAAExH,SAAS,CAACuR,IAAI;EACrC;AACF;AACA;AACA;AACA;EACE3I,YAAY,EAAE5I,SAAS,CAACuR,IAAI;EAC5B;AACF;AACA;AACA;AACA;EACEjM,MAAM,EAAEtF,SAAS,CAACmR,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;EAChC;AACF;AACA;AACA;EACE/J,aAAa,EAAEpH,SAAS,CAACmR,KAAK,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;EAChD;AACF;AACA;AACA;AACA;EACEnJ,QAAQ,EAAEhI,SAAS,CAACiR,IAAI;EACxB;AACF;AACA;AACA;EACEhM,gBAAgB,EAAEjF,SAAS,CAACiR,IAAI;EAChC;AACF;AACA;AACA;EACEvK,aAAa,EAAE1G,SAAS,CAACyR,SAAS,CAAC,CAACzR,SAAS,CAACkR,OAAO,CAAClR,SAAS,CAACqR,MAAM,CAACD,UAAU,CAAC,EAAEpR,SAAS,CAACqR,MAAM,CAAC,CAAC;EACtG;AACF;AACA;AACA;AACA;EACElM,aAAa,EAAEnF,SAAS,CAACuR,IAAI;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACErK,iBAAiB,EAAElH,SAAS,CAACuR,IAAI;EACjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACErJ,2BAA2B,EAAElI,SAAS,CAACiR,IAAI;EAC3C;AACF;AACA;AACA;EACEtJ,SAAS,EAAE3H,SAAS,CAACqR,MAAM;EAC3B;AACF;AACA;AACA;EACEvL,KAAK,EAAE9F,SAAS,CAACqR,MAAM;EACvB;AACF;AACA;EACEK,EAAE,EAAE1R,SAAS,CAACyR,SAAS,CAAC,CAACzR,SAAS,CAACkR,OAAO,CAAClR,SAAS,CAACyR,SAAS,CAAC,CAACzR,SAAS,CAACuR,IAAI,EAAEvR,SAAS,CAACqR,MAAM,EAAErR,SAAS,CAACiR,IAAI,CAAC,CAAC,CAAC,EAAEjR,SAAS,CAACuR,IAAI,EAAEvR,SAAS,CAACqR,MAAM,CAAC,CAAC;EACvJ;AACF;AACA;AACA;AACA;AACA;AACA;EACE7I,QAAQ,EAAExI,SAAS,CAACsR,MAAM;EAC1B;AACF;AACA;AACA;EACE/K,KAAK,EAAEvG,SAAS,CAACkR,OAAO,CAAClR,SAAS,CAACqR,MAAM,CAAC;EAC1C;AACF;AACA;AACA;AACA;EACE3I,IAAI,EAAE1I,SAAS,CAACmR,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;EAC9B;AACF;AACA;EACE5L,KAAK,EAAEvF,SAAS,CAACkR,OAAO,CAAClR,SAAS,CAACmR,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;AACnD,CAAC,GAAG,KAAK,CAAC;AACV,SAASlL,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}