{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getTelemetryEnvConfigValue } from \"./config.js\";\nimport { fetchWithRetry } from \"./fetcher.js\";\nconst sendMuiXTelemetryRetries = 3;\nfunction shouldSendTelemetry(telemetryContext) {\n  // Disable reporting in SSR / Node.js\n  if (typeof window === 'undefined') {\n    return false;\n  }\n\n  // Priority to the config (e.g. in code, env)\n  const envIsCollecting = getTelemetryEnvConfigValue('IS_COLLECTING');\n  if (typeof envIsCollecting === 'boolean') {\n    return envIsCollecting;\n  }\n\n  // Disable collection of the telemetry in CI builds,\n  // as it not related to development process\n  if (telemetryContext.traits.isCI) {\n    return false;\n  }\n\n  // Disabled by default\n  return false;\n}\nasync function sendMuiXTelemetryEvent(event) {\n  try {\n    // Disable collection of the telemetry\n    // in production environment\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n    const {\n      default: getTelemetryContext\n    } = await import(\"./get-context.js\");\n    const telemetryContext = await getTelemetryContext();\n    if (!event || !shouldSendTelemetry(telemetryContext)) {\n      return;\n    }\n    const eventPayload = _extends({}, event, {\n      context: _extends({}, telemetryContext.traits, event.context)\n    });\n    if (getTelemetryEnvConfigValue('DEBUG')) {\n      console.log('[mui-x-telemetry] event', JSON.stringify(eventPayload, null, 2));\n      return;\n    }\n\n    // TODO: batch events and send them in a single request when there will be more\n    await fetchWithRetry('https://x-telemetry.mui.com/v2/telemetry/record', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Telemetry-Client-Version': \"8.5.4\" ?? '<dev>',\n        'X-Telemetry-Node-Env': process.env.NODE_ENV ?? '<unknown>'\n      },\n      body: JSON.stringify([eventPayload])\n    }, sendMuiXTelemetryRetries);\n  } catch (_) {\n    console.log('[mui-x-telemetry] error', _);\n  }\n}\nexport default sendMuiXTelemetryEvent;","map":{"version":3,"names":["_extends","getTelemetryEnvConfigValue","fetchWithRetry","sendMuiXTelemetryRetries","shouldSendTelemetry","telemetryContext","window","envIsCollecting","traits","isCI","sendMuiXTelemetryEvent","event","process","env","NODE_ENV","default","getTelemetryContext","eventPayload","context","console","log","JSON","stringify","method","headers","body","_"],"sources":["C:/Users/tamak/Desktop/Workspace/ppe-watcher/node_modules/@mui/x-telemetry/esm/runtime/sender.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getTelemetryEnvConfigValue } from \"./config.js\";\nimport { fetchWithRetry } from \"./fetcher.js\";\nconst sendMuiXTelemetryRetries = 3;\nfunction shouldSendTelemetry(telemetryContext) {\n  // Disable reporting in SSR / Node.js\n  if (typeof window === 'undefined') {\n    return false;\n  }\n\n  // Priority to the config (e.g. in code, env)\n  const envIsCollecting = getTelemetryEnvConfigValue('IS_COLLECTING');\n  if (typeof envIsCollecting === 'boolean') {\n    return envIsCollecting;\n  }\n\n  // Disable collection of the telemetry in CI builds,\n  // as it not related to development process\n  if (telemetryContext.traits.isCI) {\n    return false;\n  }\n\n  // Disabled by default\n  return false;\n}\nasync function sendMuiXTelemetryEvent(event) {\n  try {\n    // Disable collection of the telemetry\n    // in production environment\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n    const {\n      default: getTelemetryContext\n    } = await import(\"./get-context.js\");\n    const telemetryContext = await getTelemetryContext();\n    if (!event || !shouldSendTelemetry(telemetryContext)) {\n      return;\n    }\n    const eventPayload = _extends({}, event, {\n      context: _extends({}, telemetryContext.traits, event.context)\n    });\n    if (getTelemetryEnvConfigValue('DEBUG')) {\n      console.log('[mui-x-telemetry] event', JSON.stringify(eventPayload, null, 2));\n      return;\n    }\n\n    // TODO: batch events and send them in a single request when there will be more\n    await fetchWithRetry('https://x-telemetry.mui.com/v2/telemetry/record', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Telemetry-Client-Version': \"8.5.4\" ?? '<dev>',\n        'X-Telemetry-Node-Env': process.env.NODE_ENV ?? '<unknown>'\n      },\n      body: JSON.stringify([eventPayload])\n    }, sendMuiXTelemetryRetries);\n  } catch (_) {\n    console.log('[mui-x-telemetry] error', _);\n  }\n}\nexport default sendMuiXTelemetryEvent;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,SAASC,0BAA0B,QAAQ,aAAa;AACxD,SAASC,cAAc,QAAQ,cAAc;AAC7C,MAAMC,wBAAwB,GAAG,CAAC;AAClC,SAASC,mBAAmBA,CAACC,gBAAgB,EAAE;EAC7C;EACA,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IACjC,OAAO,KAAK;EACd;;EAEA;EACA,MAAMC,eAAe,GAAGN,0BAA0B,CAAC,eAAe,CAAC;EACnE,IAAI,OAAOM,eAAe,KAAK,SAAS,EAAE;IACxC,OAAOA,eAAe;EACxB;;EAEA;EACA;EACA,IAAIF,gBAAgB,CAACG,MAAM,CAACC,IAAI,EAAE;IAChC,OAAO,KAAK;EACd;;EAEA;EACA,OAAO,KAAK;AACd;AACA,eAAeC,sBAAsBA,CAACC,KAAK,EAAE;EAC3C,IAAI;IACF;IACA;IACA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC;IACF;IACA,MAAM;MACJC,OAAO,EAAEC;IACX,CAAC,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC;IACpC,MAAMX,gBAAgB,GAAG,MAAMW,mBAAmB,CAAC,CAAC;IACpD,IAAI,CAACL,KAAK,IAAI,CAACP,mBAAmB,CAACC,gBAAgB,CAAC,EAAE;MACpD;IACF;IACA,MAAMY,YAAY,GAAGjB,QAAQ,CAAC,CAAC,CAAC,EAAEW,KAAK,EAAE;MACvCO,OAAO,EAAElB,QAAQ,CAAC,CAAC,CAAC,EAAEK,gBAAgB,CAACG,MAAM,EAAEG,KAAK,CAACO,OAAO;IAC9D,CAAC,CAAC;IACF,IAAIjB,0BAA0B,CAAC,OAAO,CAAC,EAAE;MACvCkB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,IAAI,CAACC,SAAS,CAACL,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MAC7E;IACF;;IAEA;IACA,MAAMf,cAAc,CAAC,iDAAiD,EAAE;MACtEqB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,4BAA4B,EAAE,OAAO,IAAI,OAAO;QAChD,sBAAsB,EAAEZ,OAAO,CAACC,GAAG,CAACC,QAAQ,IAAI;MAClD,CAAC;MACDW,IAAI,EAAEJ,IAAI,CAACC,SAAS,CAAC,CAACL,YAAY,CAAC;IACrC,CAAC,EAAEd,wBAAwB,CAAC;EAC9B,CAAC,CAAC,OAAOuB,CAAC,EAAE;IACVP,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEM,CAAC,CAAC;EAC3C;AACF;AACA,eAAehB,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}