{"ast":null,"code":"const envEnabledValues = ['1', 'true', 'yes', 'y'];\nconst envDisabledValues = ['0', 'false', 'no', 'n'];\nfunction getBooleanEnv(value) {\n  if (!value) {\n    return undefined;\n  }\n  if (envEnabledValues.includes(value)) {\n    return true;\n  }\n  if (envDisabledValues.includes(value)) {\n    return false;\n  }\n  return undefined;\n}\nfunction getBooleanEnvFromEnvObject(envKey, envObj) {\n  const keys = Object.keys(envObj);\n  for (let i = 0; i < keys.length; i += 1) {\n    const key = keys[i];\n    if (!key.endsWith(envKey)) {\n      continue;\n    }\n    const value = getBooleanEnv(envObj[key]?.toLowerCase());\n    if (typeof value === 'boolean') {\n      return value;\n    }\n  }\n  return undefined;\n}\nfunction getIsTelemetryCollecting() {\n  // Check global variable\n  // eslint-disable-next-line no-underscore-dangle\n  const globalValue = globalThis.__MUI_X_TELEMETRY_DISABLED__;\n  if (typeof globalValue === 'boolean') {\n    // If disabled=true, telemetry is disabled\n    // If disabled=false, telemetry is enabled\n    return !globalValue;\n  }\n  try {\n    if (typeof process !== 'undefined' && process.env && typeof process.env === 'object') {\n      const result = getBooleanEnvFromEnvObject('MUI_X_TELEMETRY_DISABLED', process.env);\n      if (typeof result === 'boolean') {\n        // If disabled=true, telemetry is disabled\n        // If disabled=false, telemetry is enabled\n        return !result;\n      }\n    }\n  } catch (_) {\n    // If there is an error, return the default value\n  }\n  try {\n    // e.g. Vite.js\n    // eslint-disable-next-line global-require\n    const {\n      importMetaEnv\n    } = require('./config.import-meta');\n    if (importMetaEnv) {\n      const result = getBooleanEnvFromEnvObject('MUI_X_TELEMETRY_DISABLED', importMetaEnv);\n      if (typeof result === 'boolean') {\n        // If disabled=true, telemetry is disabled\n        // If disabled=false, telemetry is enabled\n        return !result;\n      }\n    }\n  } catch (_) {\n    // If there is an error, return the default value\n  }\n  try {\n    // Some build tools replace env variables on compilation\n    // e.g. Next.js, webpack EnvironmentPlugin\n    const envValue = process.env.MUI_X_TELEMETRY_DISABLED || process.env.NEXT_PUBLIC_MUI_X_TELEMETRY_DISABLED || process.env.GATSBY_MUI_X_TELEMETRY_DISABLED || process.env.REACT_APP_MUI_X_TELEMETRY_DISABLED || process.env.PUBLIC_MUI_X_TELEMETRY_DISABLED;\n    const result = getBooleanEnv(envValue);\n    if (typeof result === 'boolean') {\n      // If disabled=true, telemetry is disabled\n      // If disabled=false, telemetry is enabled\n      return !result;\n    }\n  } catch (_) {\n    // If there is an error, return the default value\n  }\n  return undefined;\n}\nfunction getIsDebugModeEnabled() {\n  try {\n    // Check global variable\n    // eslint-disable-next-line no-underscore-dangle\n    const globalValue = globalThis.__MUI_X_TELEMETRY_DEBUG__;\n    if (typeof globalValue === 'boolean') {\n      return globalValue;\n    }\n    if (typeof process !== 'undefined' && process.env && typeof process.env === 'object') {\n      const result = getBooleanEnvFromEnvObject('MUI_X_TELEMETRY_DEBUG', process.env);\n      if (typeof result === 'boolean') {\n        return result;\n      }\n    }\n\n    // e.g. Webpack EnvironmentPlugin\n    if (process.env.MUI_X_TELEMETRY_DEBUG) {\n      const result = getBooleanEnv(process.env.MUI_X_TELEMETRY_DEBUG);\n      if (typeof result === 'boolean') {\n        return result;\n      }\n    }\n  } catch (_) {\n    // If there is an error, return the default value\n  }\n  try {\n    // e.g. Vite.js\n    // eslint-disable-next-line global-require\n    const {\n      importMetaEnv\n    } = require('./config.import-meta');\n    if (importMetaEnv) {\n      const result = getBooleanEnvFromEnvObject('MUI_X_TELEMETRY_DEBUG', importMetaEnv);\n      if (typeof result === 'boolean') {\n        return result;\n      }\n    }\n  } catch (_) {\n    // If there is an error, return the default value\n  }\n  try {\n    // e.g. Next.js, webpack EnvironmentPlugin\n    const envValue = process.env.MUI_X_TELEMETRY_DEBUG || process.env.NEXT_PUBLIC_MUI_X_TELEMETRY_DEBUG || process.env.GATSBY_MUI_X_TELEMETRY_DEBUG || process.env.REACT_APP_MUI_X_TELEMETRY_DEBUG || process.env.PUBLIC_MUI_X_TELEMETRY_DEBUG;\n    const result = getBooleanEnv(envValue);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  } catch (_) {\n    // If there is an error, return the default value\n  }\n  return false;\n}\nfunction getNodeEnv() {\n  try {\n    return process.env.NODE_ENV ?? '<unknown>';\n  } catch (_) {\n    return '<unknown>';\n  }\n}\nlet cachedEnv = null;\nexport function getTelemetryEnvConfig(skipCache = false) {\n  if (skipCache || !cachedEnv) {\n    cachedEnv = {\n      NODE_ENV: getNodeEnv(),\n      IS_COLLECTING: getIsTelemetryCollecting(),\n      DEBUG: getIsDebugModeEnabled()\n    };\n  }\n  return cachedEnv;\n}\nexport function getTelemetryEnvConfigValue(key) {\n  return getTelemetryEnvConfig()[key];\n}\nexport function setTelemetryEnvConfigValue(key, value) {\n  getTelemetryEnvConfig()[key] = value;\n}","map":{"version":3,"names":["envEnabledValues","envDisabledValues","getBooleanEnv","value","undefined","includes","getBooleanEnvFromEnvObject","envKey","envObj","keys","Object","i","length","key","endsWith","toLowerCase","getIsTelemetryCollecting","globalValue","globalThis","__MUI_X_TELEMETRY_DISABLED__","process","env","result","_","importMetaEnv","require","envValue","MUI_X_TELEMETRY_DISABLED","NEXT_PUBLIC_MUI_X_TELEMETRY_DISABLED","GATSBY_MUI_X_TELEMETRY_DISABLED","REACT_APP_MUI_X_TELEMETRY_DISABLED","PUBLIC_MUI_X_TELEMETRY_DISABLED","getIsDebugModeEnabled","__MUI_X_TELEMETRY_DEBUG__","MUI_X_TELEMETRY_DEBUG","NEXT_PUBLIC_MUI_X_TELEMETRY_DEBUG","GATSBY_MUI_X_TELEMETRY_DEBUG","REACT_APP_MUI_X_TELEMETRY_DEBUG","PUBLIC_MUI_X_TELEMETRY_DEBUG","getNodeEnv","NODE_ENV","cachedEnv","getTelemetryEnvConfig","skipCache","IS_COLLECTING","DEBUG","getTelemetryEnvConfigValue","setTelemetryEnvConfigValue"],"sources":["C:/Users/tamak/Desktop/Workspace/ppe-watcher/node_modules/@mui/x-telemetry/esm/runtime/config.js"],"sourcesContent":["const envEnabledValues = ['1', 'true', 'yes', 'y'];\nconst envDisabledValues = ['0', 'false', 'no', 'n'];\nfunction getBooleanEnv(value) {\n  if (!value) {\n    return undefined;\n  }\n  if (envEnabledValues.includes(value)) {\n    return true;\n  }\n  if (envDisabledValues.includes(value)) {\n    return false;\n  }\n  return undefined;\n}\nfunction getBooleanEnvFromEnvObject(envKey, envObj) {\n  const keys = Object.keys(envObj);\n  for (let i = 0; i < keys.length; i += 1) {\n    const key = keys[i];\n    if (!key.endsWith(envKey)) {\n      continue;\n    }\n    const value = getBooleanEnv(envObj[key]?.toLowerCase());\n    if (typeof value === 'boolean') {\n      return value;\n    }\n  }\n  return undefined;\n}\nfunction getIsTelemetryCollecting() {\n  // Check global variable\n  // eslint-disable-next-line no-underscore-dangle\n  const globalValue = globalThis.__MUI_X_TELEMETRY_DISABLED__;\n  if (typeof globalValue === 'boolean') {\n    // If disabled=true, telemetry is disabled\n    // If disabled=false, telemetry is enabled\n    return !globalValue;\n  }\n  try {\n    if (typeof process !== 'undefined' && process.env && typeof process.env === 'object') {\n      const result = getBooleanEnvFromEnvObject('MUI_X_TELEMETRY_DISABLED', process.env);\n      if (typeof result === 'boolean') {\n        // If disabled=true, telemetry is disabled\n        // If disabled=false, telemetry is enabled\n        return !result;\n      }\n    }\n  } catch (_) {\n    // If there is an error, return the default value\n  }\n  try {\n    // e.g. Vite.js\n    // eslint-disable-next-line global-require\n    const {\n      importMetaEnv\n    } = require('./config.import-meta');\n    if (importMetaEnv) {\n      const result = getBooleanEnvFromEnvObject('MUI_X_TELEMETRY_DISABLED', importMetaEnv);\n      if (typeof result === 'boolean') {\n        // If disabled=true, telemetry is disabled\n        // If disabled=false, telemetry is enabled\n        return !result;\n      }\n    }\n  } catch (_) {\n    // If there is an error, return the default value\n  }\n  try {\n    // Some build tools replace env variables on compilation\n    // e.g. Next.js, webpack EnvironmentPlugin\n    const envValue = process.env.MUI_X_TELEMETRY_DISABLED || process.env.NEXT_PUBLIC_MUI_X_TELEMETRY_DISABLED || process.env.GATSBY_MUI_X_TELEMETRY_DISABLED || process.env.REACT_APP_MUI_X_TELEMETRY_DISABLED || process.env.PUBLIC_MUI_X_TELEMETRY_DISABLED;\n    const result = getBooleanEnv(envValue);\n    if (typeof result === 'boolean') {\n      // If disabled=true, telemetry is disabled\n      // If disabled=false, telemetry is enabled\n      return !result;\n    }\n  } catch (_) {\n    // If there is an error, return the default value\n  }\n  return undefined;\n}\nfunction getIsDebugModeEnabled() {\n  try {\n    // Check global variable\n    // eslint-disable-next-line no-underscore-dangle\n    const globalValue = globalThis.__MUI_X_TELEMETRY_DEBUG__;\n    if (typeof globalValue === 'boolean') {\n      return globalValue;\n    }\n    if (typeof process !== 'undefined' && process.env && typeof process.env === 'object') {\n      const result = getBooleanEnvFromEnvObject('MUI_X_TELEMETRY_DEBUG', process.env);\n      if (typeof result === 'boolean') {\n        return result;\n      }\n    }\n\n    // e.g. Webpack EnvironmentPlugin\n    if (process.env.MUI_X_TELEMETRY_DEBUG) {\n      const result = getBooleanEnv(process.env.MUI_X_TELEMETRY_DEBUG);\n      if (typeof result === 'boolean') {\n        return result;\n      }\n    }\n  } catch (_) {\n    // If there is an error, return the default value\n  }\n  try {\n    // e.g. Vite.js\n    // eslint-disable-next-line global-require\n    const {\n      importMetaEnv\n    } = require('./config.import-meta');\n    if (importMetaEnv) {\n      const result = getBooleanEnvFromEnvObject('MUI_X_TELEMETRY_DEBUG', importMetaEnv);\n      if (typeof result === 'boolean') {\n        return result;\n      }\n    }\n  } catch (_) {\n    // If there is an error, return the default value\n  }\n  try {\n    // e.g. Next.js, webpack EnvironmentPlugin\n    const envValue = process.env.MUI_X_TELEMETRY_DEBUG || process.env.NEXT_PUBLIC_MUI_X_TELEMETRY_DEBUG || process.env.GATSBY_MUI_X_TELEMETRY_DEBUG || process.env.REACT_APP_MUI_X_TELEMETRY_DEBUG || process.env.PUBLIC_MUI_X_TELEMETRY_DEBUG;\n    const result = getBooleanEnv(envValue);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  } catch (_) {\n    // If there is an error, return the default value\n  }\n  return false;\n}\nfunction getNodeEnv() {\n  try {\n    return process.env.NODE_ENV ?? '<unknown>';\n  } catch (_) {\n    return '<unknown>';\n  }\n}\nlet cachedEnv = null;\nexport function getTelemetryEnvConfig(skipCache = false) {\n  if (skipCache || !cachedEnv) {\n    cachedEnv = {\n      NODE_ENV: getNodeEnv(),\n      IS_COLLECTING: getIsTelemetryCollecting(),\n      DEBUG: getIsDebugModeEnabled()\n    };\n  }\n  return cachedEnv;\n}\nexport function getTelemetryEnvConfigValue(key) {\n  return getTelemetryEnvConfig()[key];\n}\nexport function setTelemetryEnvConfigValue(key, value) {\n  getTelemetryEnvConfig()[key] = value;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}