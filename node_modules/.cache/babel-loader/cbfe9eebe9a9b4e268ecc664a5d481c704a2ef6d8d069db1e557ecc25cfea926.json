{"ast":null,"code":"'use client';\n\nimport { useControlledValue, useFieldInternalPropsWithDefaults } from '@mui/x-date-pickers/internals';\nimport { useValidation } from '@mui/x-date-pickers/validation';\nimport { useTextFieldProps } from \"./useTextFieldProps.js\";\nimport { useMultiInputRangeFieldSelectedSections } from \"./useMultiInputRangeFieldSelectedSections.js\";\nimport { useMultiInputRangeFieldRootProps } from \"./useMultiInputRangeFieldRootProps.js\";\n\n/**\n * Basic example:\n *\n * ```tsx\n * import Box from '@mui/material/Box';\n * import { useSplitFieldProps } from '@mui/x-date-pickers/hooks';\n * import { PickersTextField } from '@mui/x-date-pickers/PickersTextField';\n * import { useDateRangeManager } from '@mui/x-date-pickers-pro/managers';\n *\n * function MultiInputField(props) {\n *   const manager = useDateRangeManager();\n *   const { internalProps, forwardedProps } = useSplitFieldProps(props, 'date');\n *   const response = useMultiInputRangeField({\n *     manager,\n *     internalProps,\n *     startTextFieldProps: {},\n *     endTextFieldProps: {},\n *     rootProps: forwardedProps,\n *   });\n *\n *   return (\n *     <Box {...response.root}>\n *       <PickersTextField {...response.startTextField} />\n *       <span>{' – '}</span>\n *       <PickersTextField {...response.endTextField} />\n *     </Box>\n *   );\n * }\n * ```\n *\n * @param {UseMultiInputRangeFieldParameters<TManager, TTextFieldProps>} parameters The parameters of the hook.\n * @param {TManager} parameters.manager The manager of the field.\n * @param {PickerManagerFieldInternalProps<TManager>} parameters.internalProps The internal props of the field.\n * @param {TTextFieldProps} parameters.startForwardedProps The forwarded props of the start field.\n * @param {TTextFieldProps} parameters.endForwardedProps The forwarded props of the end field.\n * @returns {UseMultiInputRangeFieldReturnValue<TManager, TTextFieldProps>} The props to pass to the start and the end components.\n */\nexport function useMultiInputRangeField(parameters) {\n  const {\n    manager,\n    internalProps,\n    rootProps,\n    startTextFieldProps,\n    endTextFieldProps\n  } = parameters;\n  const internalPropsWithDefaults = useFieldInternalPropsWithDefaults({\n    manager,\n    internalProps\n  });\n  const {\n    value: valueProp,\n    defaultValue,\n    format,\n    formatDensity,\n    shouldRespectLeadingZeros,\n    onChange,\n    disabled,\n    readOnly,\n    selectedSections,\n    onSelectedSectionsChange,\n    timezone: timezoneProp,\n    enableAccessibleFieldDOMStructure,\n    autoFocus,\n    referenceDate,\n    unstableStartFieldRef,\n    unstableEndFieldRef\n  } = internalPropsWithDefaults;\n  const {\n    value,\n    handleValueChange,\n    timezone\n  } = useControlledValue({\n    name: 'useMultiInputRangeField',\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    referenceDate,\n    onChange,\n    valueManager: manager.internal_valueManager\n  });\n  const validation = useValidation({\n    props: internalPropsWithDefaults,\n    value,\n    timezone,\n    validator: manager.validator,\n    onError: internalPropsWithDefaults.onError\n  });\n  const selectedSectionsResponse = useMultiInputRangeFieldSelectedSections({\n    selectedSections,\n    onSelectedSectionsChange,\n    unstableStartFieldRef,\n    unstableEndFieldRef\n  });\n  const sharedInternalProps = {\n    disabled,\n    readOnly,\n    timezone,\n    format,\n    formatDensity,\n    shouldRespectLeadingZeros,\n    enableAccessibleFieldDOMStructure\n  };\n  const rootResponse = useMultiInputRangeFieldRootProps(rootProps);\n  const startTextFieldResponse = useTextFieldProps({\n    valueType: manager.valueType,\n    position: 'start',\n    value,\n    onChange: handleValueChange,\n    autoFocus,\n    validation,\n    forwardedProps: startTextFieldProps,\n    selectedSectionProps: selectedSectionsResponse.start,\n    sharedInternalProps\n  });\n  const endTextFieldResponse = useTextFieldProps({\n    valueType: manager.valueType,\n    position: 'end',\n    value,\n    onChange: handleValueChange,\n    autoFocus,\n    validation,\n    forwardedProps: endTextFieldProps,\n    selectedSectionProps: selectedSectionsResponse.end,\n    sharedInternalProps\n  });\n  return {\n    root: rootResponse,\n    startTextField: startTextFieldResponse,\n    endTextField: endTextFieldResponse,\n    enableAccessibleFieldDOMStructure\n  };\n}","map":{"version":3,"names":["useControlledValue","useFieldInternalPropsWithDefaults","useValidation","useTextFieldProps","useMultiInputRangeFieldSelectedSections","useMultiInputRangeFieldRootProps","useMultiInputRangeField","parameters","manager","internalProps","rootProps","startTextFieldProps","endTextFieldProps","internalPropsWithDefaults","value","valueProp","defaultValue","format","formatDensity","shouldRespectLeadingZeros","onChange","disabled","readOnly","selectedSections","onSelectedSectionsChange","timezone","timezoneProp","enableAccessibleFieldDOMStructure","autoFocus","referenceDate","unstableStartFieldRef","unstableEndFieldRef","handleValueChange","name","valueManager","internal_valueManager","validation","props","validator","onError","selectedSectionsResponse","sharedInternalProps","rootResponse","startTextFieldResponse","valueType","position","forwardedProps","selectedSectionProps","start","endTextFieldResponse","end","root","startTextField","endTextField"],"sources":["C:/Users/tamak/Desktop/Workspace/ppe-watcher/node_modules/@mui/x-date-pickers-pro/esm/hooks/useMultiInputRangeField/useMultiInputRangeField.js"],"sourcesContent":["'use client';\n\nimport { useControlledValue, useFieldInternalPropsWithDefaults } from '@mui/x-date-pickers/internals';\nimport { useValidation } from '@mui/x-date-pickers/validation';\nimport { useTextFieldProps } from \"./useTextFieldProps.js\";\nimport { useMultiInputRangeFieldSelectedSections } from \"./useMultiInputRangeFieldSelectedSections.js\";\nimport { useMultiInputRangeFieldRootProps } from \"./useMultiInputRangeFieldRootProps.js\";\n\n/**\n * Basic example:\n *\n * ```tsx\n * import Box from '@mui/material/Box';\n * import { useSplitFieldProps } from '@mui/x-date-pickers/hooks';\n * import { PickersTextField } from '@mui/x-date-pickers/PickersTextField';\n * import { useDateRangeManager } from '@mui/x-date-pickers-pro/managers';\n *\n * function MultiInputField(props) {\n *   const manager = useDateRangeManager();\n *   const { internalProps, forwardedProps } = useSplitFieldProps(props, 'date');\n *   const response = useMultiInputRangeField({\n *     manager,\n *     internalProps,\n *     startTextFieldProps: {},\n *     endTextFieldProps: {},\n *     rootProps: forwardedProps,\n *   });\n *\n *   return (\n *     <Box {...response.root}>\n *       <PickersTextField {...response.startTextField} />\n *       <span>{' – '}</span>\n *       <PickersTextField {...response.endTextField} />\n *     </Box>\n *   );\n * }\n * ```\n *\n * @param {UseMultiInputRangeFieldParameters<TManager, TTextFieldProps>} parameters The parameters of the hook.\n * @param {TManager} parameters.manager The manager of the field.\n * @param {PickerManagerFieldInternalProps<TManager>} parameters.internalProps The internal props of the field.\n * @param {TTextFieldProps} parameters.startForwardedProps The forwarded props of the start field.\n * @param {TTextFieldProps} parameters.endForwardedProps The forwarded props of the end field.\n * @returns {UseMultiInputRangeFieldReturnValue<TManager, TTextFieldProps>} The props to pass to the start and the end components.\n */\nexport function useMultiInputRangeField(parameters) {\n  const {\n    manager,\n    internalProps,\n    rootProps,\n    startTextFieldProps,\n    endTextFieldProps\n  } = parameters;\n  const internalPropsWithDefaults = useFieldInternalPropsWithDefaults({\n    manager,\n    internalProps\n  });\n  const {\n    value: valueProp,\n    defaultValue,\n    format,\n    formatDensity,\n    shouldRespectLeadingZeros,\n    onChange,\n    disabled,\n    readOnly,\n    selectedSections,\n    onSelectedSectionsChange,\n    timezone: timezoneProp,\n    enableAccessibleFieldDOMStructure,\n    autoFocus,\n    referenceDate,\n    unstableStartFieldRef,\n    unstableEndFieldRef\n  } = internalPropsWithDefaults;\n  const {\n    value,\n    handleValueChange,\n    timezone\n  } = useControlledValue({\n    name: 'useMultiInputRangeField',\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    referenceDate,\n    onChange,\n    valueManager: manager.internal_valueManager\n  });\n  const validation = useValidation({\n    props: internalPropsWithDefaults,\n    value,\n    timezone,\n    validator: manager.validator,\n    onError: internalPropsWithDefaults.onError\n  });\n  const selectedSectionsResponse = useMultiInputRangeFieldSelectedSections({\n    selectedSections,\n    onSelectedSectionsChange,\n    unstableStartFieldRef,\n    unstableEndFieldRef\n  });\n  const sharedInternalProps = {\n    disabled,\n    readOnly,\n    timezone,\n    format,\n    formatDensity,\n    shouldRespectLeadingZeros,\n    enableAccessibleFieldDOMStructure\n  };\n  const rootResponse = useMultiInputRangeFieldRootProps(rootProps);\n  const startTextFieldResponse = useTextFieldProps({\n    valueType: manager.valueType,\n    position: 'start',\n    value,\n    onChange: handleValueChange,\n    autoFocus,\n    validation,\n    forwardedProps: startTextFieldProps,\n    selectedSectionProps: selectedSectionsResponse.start,\n    sharedInternalProps\n  });\n  const endTextFieldResponse = useTextFieldProps({\n    valueType: manager.valueType,\n    position: 'end',\n    value,\n    onChange: handleValueChange,\n    autoFocus,\n    validation,\n    forwardedProps: endTextFieldProps,\n    selectedSectionProps: selectedSectionsResponse.end,\n    sharedInternalProps\n  });\n  return {\n    root: rootResponse,\n    startTextField: startTextFieldResponse,\n    endTextField: endTextFieldResponse,\n    enableAccessibleFieldDOMStructure\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}